
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/basics/quickstart_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_basics_quickstart_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_basics_quickstart_tutorial.py:


`Learn the Basics <intro.html>`_ ||
**Quickstart** ||
`Tensors <tensorqs_tutorial.html>`_ ||
`Datasets & DataLoaders <data_tutorial.html>`_ ||
`Transforms <transforms_tutorial.html>`_ ||
`Build Model <buildmodel_tutorial.html>`_ ||
`Autograd <autogradqs_tutorial.html>`_ ||
`Optimization <optimization_tutorial.html>`_ ||
`Save & Load Model <saveloadrun_tutorial.html>`_

Quickstart
===================
This section runs through the API for common tasks in machine learning. Refer to the links in each section to dive deeper.

Working with data
-----------------
PyTorch has two `primitives to work with data <https://pytorch.org/docs/stable/data.html>`_:
``torch.utils.data.DataLoader`` and ``torch.utils.data.Dataset``.
``Dataset`` stores the samples and their corresponding labels, and ``DataLoader`` wraps an iterable around
the ``Dataset``.

.. GENERATED FROM PYTHON SOURCE LINES 24-31

.. code-block:: default


    import torch
    from torch import nn
    from torch.utils.data import DataLoader
    from torchvision import datasets
    from torchvision.transforms import ToTensor








.. GENERATED FROM PYTHON SOURCE LINES 32-40

PyTorch offers domain-specific libraries such as `TorchText <https://pytorch.org/text/stable/index.html>`_,
`TorchVision <https://pytorch.org/vision/stable/index.html>`_, and `TorchAudio <https://pytorch.org/audio/stable/index.html>`_,
all of which include datasets. For this tutorial, we  will be using a TorchVision dataset.

The ``torchvision.datasets`` module contains ``Dataset`` objects for many real-world vision data like
CIFAR, COCO (`full list here <https://pytorch.org/vision/stable/datasets.html>`_). In this tutorial, we
use the FashionMNIST dataset. Every TorchVision ``Dataset`` includes two arguments: ``transform`` and
``target_transform`` to modify the samples and labels respectively.

.. GENERATED FROM PYTHON SOURCE LINES 40-57

.. code-block:: default


    # Download training data from open datasets.
    training_data = datasets.FashionMNIST(
        root="data",
        train=True,
        download=True,
        transform=ToTensor(),
    )

    # Download test data from open datasets.
    test_data = datasets.FashionMNIST(
        root="data",
        train=False,
        download=True,
        transform=ToTensor(),
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to data/FashionMNIST/raw/train-images-idx3-ubyte.gz

      0%|          | 0/26421880 [00:00<?, ?it/s]
      0%|          | 32768/26421880 [00:00<01:26, 305614.13it/s]
      0%|          | 65536/26421880 [00:00<01:26, 304238.42it/s]
      0%|          | 131072/26421880 [00:00<00:59, 442280.95it/s]
      1%|          | 196608/26421880 [00:00<00:51, 507468.24it/s]
      2%|1         | 425984/26421880 [00:00<00:23, 1089672.07it/s]
      3%|3         | 819200/26421880 [00:00<00:13, 1956401.79it/s]
      6%|6         | 1671168/26421880 [00:00<00:06, 3893171.77it/s]
     13%|#2        | 3342336/26421880 [00:00<00:03, 7577388.20it/s]
     24%|##4       | 6455296/26421880 [00:00<00:01, 14183059.76it/s]
     36%|###6      | 9568256/26421880 [00:01<00:00, 18729981.27it/s]
     48%|####7     | 12648448/26421880 [00:01<00:00, 21711331.85it/s]
     59%|#####9    | 15695872/26421880 [00:01<00:00, 23435795.30it/s]
     71%|#######1  | 18808832/26421880 [00:01<00:00, 25027707.69it/s]
     83%|########2 | 21856256/26421880 [00:01<00:00, 25875369.11it/s]
     95%|#########4| 24969216/26421880 [00:01<00:00, 26743845.61it/s]
    100%|##########| 26421880/26421880 [00:01<00:00, 16195596.40it/s]
    Extracting data/FashionMNIST/raw/train-images-idx3-ubyte.gz to data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw/train-labels-idx1-ubyte.gz

      0%|          | 0/29515 [00:00<?, ?it/s]
    100%|##########| 29515/29515 [00:00<00:00, 271883.06it/s]
    100%|##########| 29515/29515 [00:00<00:00, 270275.03it/s]
    Extracting data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz

      0%|          | 0/4422102 [00:00<?, ?it/s]
      1%|          | 32768/4422102 [00:00<00:14, 303684.17it/s]
      1%|1         | 65536/4422102 [00:00<00:14, 302036.14it/s]
      3%|2         | 131072/4422102 [00:00<00:09, 439308.76it/s]
      5%|5         | 229376/4422102 [00:00<00:06, 622276.57it/s]
     11%|#1        | 491520/4422102 [00:00<00:03, 1266677.14it/s]
     21%|##1       | 950272/4422102 [00:00<00:01, 2273712.19it/s]
     44%|####3     | 1933312/4422102 [00:00<00:00, 4487081.33it/s]
     87%|########6 | 3833856/4422102 [00:00<00:00, 8629060.84it/s]
    100%|##########| 4422102/4422102 [00:00<00:00, 5072306.69it/s]
    Extracting data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz

      0%|          | 0/5148 [00:00<?, ?it/s]
    100%|##########| 5148/5148 [00:00<00:00, 24071657.74it/s]
    Extracting data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw





.. GENERATED FROM PYTHON SOURCE LINES 58-61

We pass the ``Dataset`` as an argument to ``DataLoader``. This wraps an iterable over our dataset, and supports
automatic batching, sampling, shuffling and multiprocess data loading. Here we define a batch size of 64, i.e. each element
in the dataloader iterable will return a batch of 64 features and labels.

.. GENERATED FROM PYTHON SOURCE LINES 61-73

.. code-block:: default


    batch_size = 64

    # Create data loaders.
    train_dataloader = DataLoader(training_data, batch_size=batch_size)
    test_dataloader = DataLoader(test_data, batch_size=batch_size)

    for X, y in test_dataloader:
        print(f"Shape of X [N, C, H, W]: {X.shape}")
        print(f"Shape of y: {y.shape} {y.dtype}")
        break





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Shape of X [N, C, H, W]: torch.Size([64, 1, 28, 28])
    Shape of y: torch.Size([64]) torch.int64




.. GENERATED FROM PYTHON SOURCE LINES 74-76

Read more about `loading data in PyTorch <data_tutorial.html>`_.


.. GENERATED FROM PYTHON SOURCE LINES 78-80

--------------


.. GENERATED FROM PYTHON SOURCE LINES 82-88

Creating Models
------------------
To define a neural network in PyTorch, we create a class that inherits
from `nn.Module <https://pytorch.org/docs/stable/generated/torch.nn.Module.html>`_. We define the layers of the network
in the ``__init__`` function and specify how data will pass through the network in the ``forward`` function. To accelerate
operations in the neural network, we move it to the GPU or MPS if available.

.. GENERATED FROM PYTHON SOURCE LINES 88-120

.. code-block:: default


    # Get cpu, gpu or mps device for training.
    device = (
        "cuda"
        if torch.cuda.is_available()
        else "mps"
        if torch.backends.mps.is_available()
        else "cpu"
    )
    print(f"Using {device} device")

    # Define model
    class NeuralNetwork(nn.Module):
        def __init__(self):
            super().__init__()
            self.flatten = nn.Flatten()
            self.linear_relu_stack = nn.Sequential(
                nn.Linear(28*28, 512),
                nn.ReLU(),
                nn.Linear(512, 512),
                nn.ReLU(),
                nn.Linear(512, 10)
            )

        def forward(self, x):
            x = self.flatten(x)
            logits = self.linear_relu_stack(x)
            return logits

    model = NeuralNetwork().to(device)
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Using cuda device
    NeuralNetwork(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (linear_relu_stack): Sequential(
        (0): Linear(in_features=784, out_features=512, bias=True)
        (1): ReLU()
        (2): Linear(in_features=512, out_features=512, bias=True)
        (3): ReLU()
        (4): Linear(in_features=512, out_features=10, bias=True)
      )
    )




.. GENERATED FROM PYTHON SOURCE LINES 121-123

Read more about `building neural networks in PyTorch <buildmodel_tutorial.html>`_.


.. GENERATED FROM PYTHON SOURCE LINES 126-128

--------------


.. GENERATED FROM PYTHON SOURCE LINES 131-135

Optimizing the Model Parameters
----------------------------------------
To train a model, we need a `loss function <https://pytorch.org/docs/stable/nn.html#loss-functions>`_
and an `optimizer <https://pytorch.org/docs/stable/optim.html>`_.

.. GENERATED FROM PYTHON SOURCE LINES 135-140

.. code-block:: default


    loss_fn = nn.CrossEntropyLoss()
    optimizer = torch.optim.SGD(model.parameters(), lr=1e-3)









.. GENERATED FROM PYTHON SOURCE LINES 141-143

In a single training loop, the model makes predictions on the training dataset (fed to it in batches), and
backpropagates the prediction error to adjust the model's parameters.

.. GENERATED FROM PYTHON SOURCE LINES 143-163

.. code-block:: default


    def train(dataloader, model, loss_fn, optimizer):
        size = len(dataloader.dataset)
        model.train()
        for batch, (X, y) in enumerate(dataloader):
            X, y = X.to(device), y.to(device)

            # Compute prediction error
            pred = model(X)
            loss = loss_fn(pred, y)

            # Backpropagation
            loss.backward()
            optimizer.step()
            optimizer.zero_grad()

            if batch % 100 == 0:
                loss, current = loss.item(), (batch + 1) * len(X)
                print(f"loss: {loss:>7f}  [{current:>5d}/{size:>5d}]")








.. GENERATED FROM PYTHON SOURCE LINES 164-165

We also check the model's performance against the test dataset to ensure it is learning.

.. GENERATED FROM PYTHON SOURCE LINES 165-181

.. code-block:: default


    def test(dataloader, model, loss_fn):
        size = len(dataloader.dataset)
        num_batches = len(dataloader)
        model.eval()
        test_loss, correct = 0, 0
        with torch.no_grad():
            for X, y in dataloader:
                X, y = X.to(device), y.to(device)
                pred = model(X)
                test_loss += loss_fn(pred, y).item()
                correct += (pred.argmax(1) == y).type(torch.float).sum().item()
        test_loss /= num_batches
        correct /= size
        print(f"Test Error: \n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \n")








.. GENERATED FROM PYTHON SOURCE LINES 182-185

The training process is conducted over several iterations (*epochs*). During each epoch, the model learns
parameters to make better predictions. We print the model's accuracy and loss at each epoch; we'd like to see the
accuracy increase and the loss decrease with every epoch.

.. GENERATED FROM PYTHON SOURCE LINES 185-193

.. code-block:: default


    epochs = 5
    for t in range(epochs):
        print(f"Epoch {t+1}\n-------------------------------")
        train(train_dataloader, model, loss_fn, optimizer)
        test(test_dataloader, model, loss_fn)
    print("Done!")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Epoch 1
    -------------------------------
    loss: 2.300704  [   64/60000]
    loss: 2.302832  [ 6464/60000]
    loss: 2.275682  [12864/60000]
    loss: 2.264829  [19264/60000]
    loss: 2.249848  [25664/60000]
    loss: 2.211171  [32064/60000]
    loss: 2.223196  [38464/60000]
    loss: 2.191333  [44864/60000]
    loss: 2.187373  [51264/60000]
    loss: 2.143053  [57664/60000]
    Test Error: 
     Accuracy: 37.2%, Avg loss: 2.145080 

    Epoch 2
    -------------------------------
    loss: 2.156888  [   64/60000]
    loss: 2.151487  [ 6464/60000]
    loss: 2.091938  [12864/60000]
    loss: 2.101963  [19264/60000]
    loss: 2.046120  [25664/60000]
    loss: 1.988901  [32064/60000]
    loss: 2.013814  [38464/60000]
    loss: 1.937940  [44864/60000]
    loss: 1.944650  [51264/60000]
    loss: 1.861928  [57664/60000]
    Test Error: 
     Accuracy: 53.0%, Avg loss: 1.864391 

    Epoch 3
    -------------------------------
    loss: 1.897139  [   64/60000]
    loss: 1.864543  [ 6464/60000]
    loss: 1.754844  [12864/60000]
    loss: 1.795220  [19264/60000]
    loss: 1.679339  [25664/60000]
    loss: 1.641273  [32064/60000]
    loss: 1.658137  [38464/60000]
    loss: 1.568755  [44864/60000]
    loss: 1.594682  [51264/60000]
    loss: 1.484385  [57664/60000]
    Test Error: 
     Accuracy: 60.5%, Avg loss: 1.506058 

    Epoch 4
    -------------------------------
    loss: 1.570009  [   64/60000]
    loss: 1.534577  [ 6464/60000]
    loss: 1.398287  [12864/60000]
    loss: 1.466259  [19264/60000]
    loss: 1.346553  [25664/60000]
    loss: 1.349336  [32064/60000]
    loss: 1.357817  [38464/60000]
    loss: 1.291994  [44864/60000]
    loss: 1.324308  [51264/60000]
    loss: 1.220196  [57664/60000]
    Test Error: 
     Accuracy: 62.9%, Avg loss: 1.249846 

    Epoch 5
    -------------------------------
    loss: 1.325328  [   64/60000]
    loss: 1.306553  [ 6464/60000]
    loss: 1.153573  [12864/60000]
    loss: 1.253840  [19264/60000]
    loss: 1.127883  [25664/60000]
    loss: 1.156067  [32064/60000]
    loss: 1.174504  [38464/60000]
    loss: 1.117233  [44864/60000]
    loss: 1.155027  [51264/60000]
    loss: 1.066265  [57664/60000]
    Test Error: 
     Accuracy: 64.7%, Avg loss: 1.089505 

    Done!




.. GENERATED FROM PYTHON SOURCE LINES 194-196

Read more about `Training your model <optimization_tutorial.html>`_.


.. GENERATED FROM PYTHON SOURCE LINES 198-200

--------------


.. GENERATED FROM PYTHON SOURCE LINES 202-205

Saving Models
-------------
A common way to save a model is to serialize the internal state dictionary (containing the model parameters).

.. GENERATED FROM PYTHON SOURCE LINES 205-211

.. code-block:: default


    torch.save(model.state_dict(), "model.pth")
    print("Saved PyTorch Model State to model.pth")







.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Saved PyTorch Model State to model.pth




.. GENERATED FROM PYTHON SOURCE LINES 212-217

Loading Models
----------------------------

The process for loading a model includes re-creating the model structure and loading
the state dictionary into it.

.. GENERATED FROM PYTHON SOURCE LINES 217-221

.. code-block:: default


    model = NeuralNetwork().to(device)
    model.load_state_dict(torch.load("model.pth"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <All keys matched successfully>



.. GENERATED FROM PYTHON SOURCE LINES 222-223

This model can now be used to make predictions.

.. GENERATED FROM PYTHON SOURCE LINES 223-246

.. code-block:: default


    classes = [
        "T-shirt/top",
        "Trouser",
        "Pullover",
        "Dress",
        "Coat",
        "Sandal",
        "Shirt",
        "Sneaker",
        "Bag",
        "Ankle boot",
    ]

    model.eval()
    x, y = test_data[0][0], test_data[0][1]
    with torch.no_grad():
        x = x.to(device)
        pred = model(x)
        predicted, actual = classes[pred[0].argmax(0)], classes[y]
        print(f'Predicted: "{predicted}", Actual: "{actual}"')






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Predicted: "Ankle boot", Actual: "Ankle boot"




.. GENERATED FROM PYTHON SOURCE LINES 247-249

Read more about `Saving & Loading your model <saveloadrun_tutorial.html>`_.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  46.987 seconds)


.. _sphx_glr_download_beginner_basics_quickstart_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: quickstart_tutorial.py <quickstart_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: quickstart_tutorial.ipynb <quickstart_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
