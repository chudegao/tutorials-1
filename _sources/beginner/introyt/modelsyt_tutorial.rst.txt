
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/introyt/modelsyt_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_introyt_modelsyt_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_introyt_modelsyt_tutorial.py:


`Introduction <introyt1_tutorial.html>`_ ||
`Tensors <tensors_deeper_tutorial.html>`_ ||
`Autograd <autogradyt_tutorial.html>`_ ||
**Building Models** ||
`TensorBoard Support <tensorboardyt_tutorial.html>`_ ||
`Training Models <trainingyt.html>`_ ||
`Model Understanding <captumyt.html>`_

Building Models with PyTorch
============================

Follow along with the video below or on `youtube <https://www.youtube.com/watch?v=OSqIP-mOWOI>`__.

.. raw:: html

   <div style="margin-top:10px; margin-bottom:10px;">
     <iframe width="560" height="315" src="https://www.youtube.com/embed/OSqIP-mOWOI" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
   </div>

``torch.nn.Module`` and ``torch.nn.Parameter``
----------------------------------------------

In this video, we’ll be discussing some of the tools PyTorch makes
available for building deep learning networks.

Except for ``Parameter``, the classes we discuss in this video are all
subclasses of ``torch.nn.Module``. This is the PyTorch base class meant
to encapsulate behaviors specific to PyTorch Models and their
components.

One important behavior of ``torch.nn.Module`` is registering parameters.
If a particular ``Module`` subclass has learning weights, these weights
are expressed as instances of ``torch.nn.Parameter``. The ``Parameter``
class is a subclass of ``torch.Tensor``, with the special behavior that
when they are assigned as attributes of a ``Module``, they are added to
the list of that modules parameters. These parameters may be accessed
through the ``parameters()`` method on the ``Module`` class.

As a simple example, here’s a very simple model with two linear layers
and an activation function. We’ll create an instance of it and ask it to
report on its parameters:

.. GENERATED FROM PYTHON SOURCE LINES 45-82

.. code-block:: default


    import torch

    class TinyModel(torch.nn.Module):
    
        def __init__(self):
            super(TinyModel, self).__init__()
        
            self.linear1 = torch.nn.Linear(100, 200)
            self.activation = torch.nn.ReLU()
            self.linear2 = torch.nn.Linear(200, 10)
            self.softmax = torch.nn.Softmax()
    
        def forward(self, x):
            x = self.linear1(x)
            x = self.activation(x)
            x = self.linear2(x)
            x = self.softmax(x)
            return x

    tinymodel = TinyModel()

    print('The model:')
    print(tinymodel)

    print('\n\nJust one layer:')
    print(tinymodel.linear2)

    print('\n\nModel params:')
    for param in tinymodel.parameters():
        print(param)

    print('\n\nLayer params:')
    for param in tinymodel.linear2.parameters():
        print(param)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The model:
    TinyModel(
      (linear1): Linear(in_features=100, out_features=200, bias=True)
      (activation): ReLU()
      (linear2): Linear(in_features=200, out_features=10, bias=True)
      (softmax): Softmax(dim=None)
    )


    Just one layer:
    Linear(in_features=200, out_features=10, bias=True)


    Model params:
    Parameter containing:
    tensor([[-0.0704, -0.0036, -0.0600,  ...,  0.0853, -0.0454, -0.0453],
            [ 0.0581,  0.0930,  0.0934,  ...,  0.0806, -0.0098,  0.0656],
            [ 0.0088, -0.0665,  0.0336,  ...,  0.0235, -0.0750,  0.0839],
            ...,
            [ 0.0011,  0.0049, -0.0953,  ..., -0.0858, -0.0471, -0.0870],
            [-0.0971, -0.0424, -0.0760,  ...,  0.0281,  0.0135, -0.0374],
            [-0.0960,  0.0527,  0.0737,  ..., -0.0308, -0.0661, -0.0999]],
           requires_grad=True)
    Parameter containing:
    tensor([ 0.0606, -0.0304, -0.0349,  0.0966, -0.0914,  0.0369,  0.0682,  0.0802,
             0.0783,  0.0612, -0.0979,  0.0482,  0.0390, -0.0508,  0.0953, -0.0552,
             0.0391, -0.0643,  0.0139, -0.0492,  0.0760, -0.0556,  0.0788,  0.0422,
             0.0515,  0.0780, -0.0617, -0.0974,  0.0759, -0.0232,  0.0977, -0.0056,
             0.0734, -0.0974, -0.0400,  0.0545,  0.0224,  0.0425,  0.0653,  0.0960,
            -0.0168,  0.0177,  0.0567, -0.0223, -0.0472,  0.0170, -0.0967, -0.0609,
             0.0401, -0.0417, -0.0904,  0.0624,  0.0161, -0.0278, -0.0291,  0.0911,
             0.0810, -0.0498, -0.0884,  0.0204, -0.0616,  0.0176,  0.0508,  0.0151,
             0.0979,  0.0175, -0.0568, -0.0968,  0.0549,  0.0839, -0.0213,  0.0930,
            -0.0706, -0.0760,  0.0731,  0.0692,  0.0107, -0.0769,  0.0660,  0.0223,
             0.0884,  0.0816,  0.0554, -0.0619, -0.0686, -0.0393, -0.0166, -0.0899,
            -0.0195,  0.0901,  0.0646, -0.0014,  0.0290,  0.0352, -0.0107,  0.0130,
             0.0972,  0.0873, -0.0344,  0.0462,  0.0794,  0.0251,  0.0657, -0.0873,
             0.0793,  0.0653, -0.0952, -0.0946, -0.0268, -0.0839,  0.0157, -0.0207,
            -0.0123, -0.0082, -0.0066,  0.0457,  0.0542, -0.0075, -0.0981,  0.0558,
             0.0154,  0.0219,  0.0938, -0.0059,  0.0614, -0.0878, -0.0596,  0.0897,
             0.0845, -0.0832,  0.0163, -0.0298,  0.0345, -0.0907,  0.0143,  0.0862,
             0.0294,  0.0318, -0.0271,  0.0892,  0.0391,  0.0761, -0.0951, -0.0929,
             0.0894, -0.0319,  0.0098,  0.0054,  0.0185,  0.0941,  0.0032, -0.0239,
            -0.0120, -0.0683, -0.0884,  0.0180, -0.0428, -0.0030,  0.0921, -0.0479,
            -0.0721,  0.0642,  0.0985,  0.0901, -0.0162, -0.0209,  0.0361, -0.0655,
             0.0341, -0.0606, -0.0318,  0.0745, -0.0128, -0.0877, -0.0337, -0.0640,
             0.0945,  0.0207, -0.0042,  0.0300, -0.0312,  0.0067,  0.0880, -0.0609,
             0.0340, -0.0006,  0.0519, -0.0900,  0.0828, -0.0730, -0.0584, -0.0484,
            -0.0941,  0.0152,  0.0558, -0.0734, -0.0310,  0.0154, -0.0858,  0.0704],
           requires_grad=True)
    Parameter containing:
    tensor([[-0.0506, -0.0559,  0.0504,  ..., -0.0208, -0.0134,  0.0099],
            [-0.0393, -0.0061,  0.0425,  ..., -0.0538, -0.0176, -0.0329],
            [ 0.0019,  0.0601, -0.0064,  ...,  0.0394, -0.0481, -0.0094],
            ...,
            [-0.0233,  0.0386,  0.0102,  ...,  0.0425,  0.0177, -0.0282],
            [ 0.0241, -0.0272,  0.0327,  ..., -0.0545, -0.0482, -0.0479],
            [-0.0370, -0.0342,  0.0644,  ...,  0.0408,  0.0400, -0.0274]],
           requires_grad=True)
    Parameter containing:
    tensor([-0.0510,  0.0043, -0.0536, -0.0167, -0.0038, -0.0072,  0.0652, -0.0685,
            -0.0060,  0.0567], requires_grad=True)


    Layer params:
    Parameter containing:
    tensor([[-0.0506, -0.0559,  0.0504,  ..., -0.0208, -0.0134,  0.0099],
            [-0.0393, -0.0061,  0.0425,  ..., -0.0538, -0.0176, -0.0329],
            [ 0.0019,  0.0601, -0.0064,  ...,  0.0394, -0.0481, -0.0094],
            ...,
            [-0.0233,  0.0386,  0.0102,  ...,  0.0425,  0.0177, -0.0282],
            [ 0.0241, -0.0272,  0.0327,  ..., -0.0545, -0.0482, -0.0479],
            [-0.0370, -0.0342,  0.0644,  ...,  0.0408,  0.0400, -0.0274]],
           requires_grad=True)
    Parameter containing:
    tensor([-0.0510,  0.0043, -0.0536, -0.0167, -0.0038, -0.0072,  0.0652, -0.0685,
            -0.0060,  0.0567], requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 83-101

This shows the fundamental structure of a PyTorch model: there is an
``__init__()`` method that defines the layers and other components of a
model, and a ``forward()`` method where the computation gets done. Note
that we can print the model, or any of its submodules, to learn about
its structure.

Common Layer Types
------------------

Linear Layers
~~~~~~~~~~~~~

The most basic type of neural network layer is a *linear* or *fully
connected* layer. This is a layer where every input influences every
output of the layer to a degree specified by the layer’s weights. If a
model has *m* inputs and *n* outputs, the weights will be an *m* x *n*
matrix. For example:


.. GENERATED FROM PYTHON SOURCE LINES 101-116

.. code-block:: default


    lin = torch.nn.Linear(3, 2)
    x = torch.rand(1, 3)
    print('Input:')
    print(x)

    print('\n\nWeight and Bias parameters:')
    for param in lin.parameters():
        print(param)

    y = lin(x)
    print('\n\nOutput:')
    print(y)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Input:
    tensor([[0.9261, 0.6763, 0.0983]])


    Weight and Bias parameters:
    Parameter containing:
    tensor([[-0.4731,  0.3401,  0.4575],
            [ 0.2797, -0.1005,  0.2325]], requires_grad=True)
    Parameter containing:
    tensor([-0.5401, -0.5098], requires_grad=True)


    Output:
    tensor([[-0.7032, -0.2959]], grad_fn=<AddmmBackward0>)




.. GENERATED FROM PYTHON SOURCE LINES 117-146

If you do the matrix multiplication of ``x`` by the linear layer’s
weights, and add the biases, you’ll find that you get the output vector
``y``.

One other important feature to note: When we checked the weights of our
layer with ``lin.weight``, it reported itself as a ``Parameter`` (which
is a subclass of ``Tensor``), and let us know that it’s tracking
gradients with autograd. This is a default behavior for ``Parameter``
that differs from ``Tensor``.

Linear layers are used widely in deep learning models. One of the most
common places you’ll see them is in classifier models, which will
usually have one or more linear layers at the end, where the last layer
will have *n* outputs, where *n* is the number of classes the classifier
addresses.

Convolutional Layers
~~~~~~~~~~~~~~~~~~~~

*Convolutional* layers are built to handle data with a high degree of
spatial correlation. They are very commonly used in computer vision,
where they detect close groupings of features which the compose into
higher-level features. They pop up in other contexts too - for example,
in NLP applications, where a word’s immediate context (that is, the
other words nearby in the sequence) can affect the meaning of a
sentence.

We saw convolutional layers in action in LeNet5 in an earlier video:


.. GENERATED FROM PYTHON SOURCE LINES 146-182

.. code-block:: default


    import torch.functional as F


    class LeNet(torch.nn.Module):

        def __init__(self):
            super(LeNet, self).__init__()
            # 1 input image channel (black & white), 6 output channels, 5x5 square convolution
            # kernel
            self.conv1 = torch.nn.Conv2d(1, 6, 5)
            self.conv2 = torch.nn.Conv2d(6, 16, 3)
            # an affine operation: y = Wx + b
            self.fc1 = torch.nn.Linear(16 * 6 * 6, 120)  # 6*6 from image dimension
            self.fc2 = torch.nn.Linear(120, 84)
            self.fc3 = torch.nn.Linear(84, 10)

        def forward(self, x):
            # Max pooling over a (2, 2) window
            x = F.max_pool2d(F.relu(self.conv1(x)), (2, 2))
            # If the size is a square you can only specify a single number
            x = F.max_pool2d(F.relu(self.conv2(x)), 2)
            x = x.view(-1, self.num_flat_features(x))
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x

        def num_flat_features(self, x):
            size = x.size()[1:]  # all dimensions except the batch dimension
            num_features = 1
            for s in size:
                num_features *= s
            return num_features









.. GENERATED FROM PYTHON SOURCE LINES 183-248

Let’s break down what’s happening in the convolutional layers of this
model. Starting with ``conv1``:

-  LeNet5 is meant to take in a 1x32x32 black & white image. **The first
   argument to a convolutional layer’s constructor is the number of
   input channels.** Here, it is 1. If we were building this model to
   look at 3-color channels, it would be 3.
-  A convolutional layer is like a window that scans over the image,
   looking for a pattern it recognizes. These patterns are called
   *features,* and one of the parameters of a convolutional layer is the
   number of features we would like it to learn. **This is the second
   argument to the constructor is the number of output features.** Here,
   we’re asking our layer to learn 6 features.
-  Just above, I likened the convolutional layer to a window - but how
   big is the window? **The third argument is the window or kernel
   size.** Here, the “5” means we’ve chosen a 5x5 kernel. (If you want a
   kernel with height different from width, you can specify a tuple for
   this argument - e.g., ``(3, 5)`` to get a 3x5 convolution kernel.)

The output of a convolutional layer is an *activation map* - a spatial
representation of the presence of features in the input tensor.
``conv1`` will give us an output tensor of 6x28x28; 6 is the number of
features, and 28 is the height and width of our map. (The 28 comes from
the fact that when scanning a 5-pixel window over a 32-pixel row, there
are only 28 valid positions.)

We then pass the output of the convolution through a ReLU activation
function (more on activation functions later), then through a max
pooling layer. The max pooling layer takes features near each other in
the activation map and groups them together. It does this by reducing
the tensor, merging every 2x2 group of cells in the output into a single
cell, and assigning that cell the maximum value of the 4 cells that went
into it. This gives us a lower-resolution version of the activation map,
with dimensions 6x14x14.

Our next convolutional layer, ``conv2``, expects 6 input channels
(corresponding to the 6 features sought by the first layer), has 16
output channels, and a 3x3 kernel. It puts out a 16x12x12 activation
map, which is again reduced by a max pooling layer to 16x6x6. Prior to
passing this output to the linear layers, it is reshaped to a 16 \* 6 \*
6 = 576-element vector for consumption by the next layer.

There are convolutional layers for addressing 1D, 2D, and 3D tensors.
There are also many more optional arguments for a conv layer
constructor, including stride length(e.g., only scanning every second or
every third position) in the input, padding (so you can scan out to the
edges of the input), and more. See the
`documentation <https://pytorch.org/docs/stable/nn.html#convolution-layers>`__
for more information.

Recurrent Layers
~~~~~~~~~~~~~~~~

*Recurrent neural networks* (or *RNNs)* are used for sequential data -
anything from time-series measurements from a scientific instrument to
natural language sentences to DNA nucleotides. An RNN does this by
maintaining a *hidden state* that acts as a sort of memory for what it
has seen in the sequence so far.

The internal structure of an RNN layer - or its variants, the LSTM (long
short-term memory) and GRU (gated recurrent unit) - is moderately
complex and beyond the scope of this video, but we’ll show you what one
looks like in action with an LSTM-based part-of-speech tagger (a type of
classifier that tells you if a word is a noun, verb, etc.):


.. GENERATED FROM PYTHON SOURCE LINES 248-272

.. code-block:: default


    class LSTMTagger(torch.nn.Module):

        def __init__(self, embedding_dim, hidden_dim, vocab_size, tagset_size):
            super(LSTMTagger, self).__init__()
            self.hidden_dim = hidden_dim

            self.word_embeddings = torch.nn.Embedding(vocab_size, embedding_dim)

            # The LSTM takes word embeddings as inputs, and outputs hidden states
            # with dimensionality hidden_dim.
            self.lstm = torch.nn.LSTM(embedding_dim, hidden_dim)

            # The linear layer that maps from hidden state space to tag space
            self.hidden2tag = torch.nn.Linear(hidden_dim, tagset_size)

        def forward(self, sentence):
            embeds = self.word_embeddings(sentence)
            lstm_out, _ = self.lstm(embeds.view(len(sentence), 1, -1))
            tag_space = self.hidden2tag(lstm_out.view(len(sentence), -1))
            tag_scores = F.log_softmax(tag_space, dim=1)
            return tag_scores









.. GENERATED FROM PYTHON SOURCE LINES 273-331

The constructor has four arguments:

-  ``vocab_size`` is the number of words in the input vocabulary. Each
   word is a one-hot vector (or unit vector) in a
   ``vocab_size``-dimensional space.
-  ``tagset_size`` is the number of tags in the output set.
-  ``embedding_dim`` is the size of the *embedding* space for the
   vocabulary. An embedding maps a vocabulary onto a low-dimensional
   space, where words with similar meanings are close together in the
   space.
-  ``hidden_dim`` is the size of the LSTM’s memory.

The input will be a sentence with the words represented as indices of
one-hot vectors. The embedding layer will then map these down to an
``embedding_dim``-dimensional space. The LSTM takes this sequence of
embeddings and iterates over it, fielding an output vector of length
``hidden_dim``. The final linear layer acts as a classifier; applying
``log_softmax()`` to the output of the final layer converts the output
into a normalized set of estimated probabilities that a given word maps
to a given tag.

If you’d like to see this network in action, check out the `Sequence
Models and LSTM
Networks <https://pytorch.org/tutorials/beginner/nlp/sequence_models_tutorial.html>`__
tutorial on pytorch.org.

Transformers
~~~~~~~~~~~~

*Transformers* are multi-purpose networks that have taken over the state
of the art in NLP with models like BERT. A discussion of transformer
architecture is beyond the scope of this video, but PyTorch has a
``Transformer`` class that allows you to define the overall parameters
of a transformer model - the number of attention heads, the number of
encoder & decoder layers, dropout and activation functions, etc. (You
can even build the BERT model from this single class, with the right
parameters!) The ``torch.nn.Transformer`` class also has classes to
encapsulate the individual components (``TransformerEncoder``,
``TransformerDecoder``) and subcomponents (``TransformerEncoderLayer``,
``TransformerDecoderLayer``). For details, check out the
`documentation <https://pytorch.org/docs/stable/nn.html#transformer-layers>`__
on transformer classes, and the relevant
`tutorial <https://pytorch.org/tutorials/beginner/transformer_tutorial.html>`__
on pytorch.org.

Other Layers and Functions
--------------------------

Data Manipulation Layers
~~~~~~~~~~~~~~~~~~~~~~~~

There are other layer types that perform important functions in models,
but don’t participate in the learning process themselves.

**Max pooling** (and its twin, min pooling) reduce a tensor by combining
cells, and assigning the maximum value of the input cells to the output
cell (we saw this). For example:


.. GENERATED FROM PYTHON SOURCE LINES 331-339

.. code-block:: default


    my_tensor = torch.rand(1, 6, 6)
    print(my_tensor)

    maxpool_layer = torch.nn.MaxPool2d(3)
    print(maxpool_layer(my_tensor))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[[0.0167, 0.5953, 0.4252, 0.9689, 0.6545, 0.4678],
             [0.6251, 0.4400, 0.4443, 0.9191, 0.5685, 0.6435],
             [0.0110, 0.1192, 0.4950, 0.3553, 0.3158, 0.0268],
             [0.3817, 0.5639, 0.3435, 0.2194, 0.4852, 0.6325],
             [0.0938, 0.8850, 0.3163, 0.2144, 0.8789, 0.3957],
             [0.1109, 0.0075, 0.5512, 0.4155, 0.1353, 0.1681]]])
    tensor([[[0.6251, 0.9689],
             [0.8850, 0.8789]]])




.. GENERATED FROM PYTHON SOURCE LINES 340-349

If you look closely at the values above, you’ll see that each of the
values in the maxpooled output is the maximum value of each quadrant of
the 6x6 input.

**Normalization layers** re-center and normalize the output of one layer
before feeding it to another. Centering the and scaling the intermediate
tensors has a number of beneficial effects, such as letting you use
higher learning rates without exploding/vanishing gradients.


.. GENERATED FROM PYTHON SOURCE LINES 349-363

.. code-block:: default


    my_tensor = torch.rand(1, 4, 4) * 20 + 5
    print(my_tensor)

    print(my_tensor.mean())

    norm_layer = torch.nn.BatchNorm1d(4)
    normed_tensor = norm_layer(my_tensor)
    print(normed_tensor)

    print(normed_tensor.mean())







.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[[13.4735, 22.4989,  7.3616, 22.9918],
             [17.9996,  8.3177, 17.1740, 15.9488],
             [23.5153, 17.4044, 21.1034, 16.1230],
             [14.0277,  9.2615, 12.1917, 16.2564]]])
    tensor(15.9781)
    tensor([[[-0.4757,  0.9056, -1.4111,  0.9811],
             [ 0.8161, -1.7006,  0.6015,  0.2830],
             [ 1.3551, -0.7262,  0.5336, -1.1626],
             [ 0.4266, -1.4331, -0.2898,  1.2962]]],
           grad_fn=<NativeBatchNormBackward0>)
    tensor(-5.9605e-08, grad_fn=<MeanBackward0>)




.. GENERATED FROM PYTHON SOURCE LINES 364-385

Running the cell above, we’ve added a large scaling factor and offset to
an input tensor; you should see the input tensor’s ``mean()`` somewhere
in the neighborhood of 15. After running it through the normalization
layer, you can see that the values are smaller, and grouped around zero
- in fact, the mean should be very small (> 1e-8).

This is beneficial because many activation functions (discussed below)
have their strongest gradients near 0, but sometimes suffer from
vanishing or exploding gradients for inputs that drive them far away
from zero. Keeping the data centered around the area of steepest
gradient will tend to mean faster, better learning and higher feasible
learning rates.

**Dropout layers** are a tool for encouraging *sparse representations*
in your model - that is, pushing it to do inference with less data.

Dropout layers work by randomly setting parts of the input tensor
*during training* - dropout layers are always turned off for inference.
This forces the model to learn against this masked or reduced dataset.
For example:


.. GENERATED FROM PYTHON SOURCE LINES 385-393

.. code-block:: default


    my_tensor = torch.rand(1, 4, 4)

    dropout = torch.nn.Dropout(p=0.4)
    print(dropout(my_tensor))
    print(dropout(my_tensor))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[[0.0000, 1.0338, 0.0000, 0.0000],
             [1.1023, 0.8837, 1.0148, 0.0000],
             [1.4486, 0.0000, 0.0000, 0.0000],
             [1.3539, 1.5954, 0.0000, 0.0000]]])
    tensor([[[0.0000, 1.0338, 0.6895, 0.5158],
             [1.1023, 0.8837, 0.0000, 0.0000],
             [1.4486, 0.4731, 1.5590, 0.0000],
             [0.0000, 1.5954, 0.0000, 0.0000]]])




.. GENERATED FROM PYTHON SOURCE LINES 394-423

Above, you can see the effect of dropout on a sample tensor. You can use
the optional ``p`` argument to set the probability of an individual
weight dropping out; if you don’t it defaults to 0.5.

Activation Functions
~~~~~~~~~~~~~~~~~~~~

Activation functions make deep learning possible. A neural network is
really a program - with many parameters - that *simulates a mathematical
function*. If all we did was multiple tensors by layer weights
repeatedly, we could only simulate *linear functions;* further, there
would be no point to having many layers, as the whole network would
reduce could be reduced to a single matrix multiplication. Inserting
*non-linear* activation functions between layers is what allows a deep
learning model to simulate any function, rather than just linear ones.

``torch.nn.Module`` has objects encapsulating all of the major
activation functions including ReLU and its many variants, Tanh,
Hardtanh, sigmoid, and more. It also includes other functions, such as
Softmax, that are most useful at the output stage of a model.

Loss Functions
~~~~~~~~~~~~~~

Loss functions tell us how far a model’s prediction is from the correct
answer. PyTorch contains a variety of loss functions, including common
MSE (mean squared error = L2 norm), Cross Entropy Loss and Negative
Likelihood Loss (useful for classifiers), and others.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.142 seconds)


.. _sphx_glr_download_beginner_introyt_modelsyt_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: modelsyt_tutorial.py <modelsyt_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: modelsyt_tutorial.ipynb <modelsyt_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
