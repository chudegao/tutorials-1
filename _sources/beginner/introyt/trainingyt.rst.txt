
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/introyt/trainingyt.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_introyt_trainingyt.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_introyt_trainingyt.py:


`Introduction <introyt1_tutorial.html>`_ ||
`Tensors <tensors_deeper_tutorial.html>`_ ||
`Autograd <autogradyt_tutorial.html>`_ ||
`Building Models <modelsyt_tutorial.html>`_ ||
`TensorBoard Support <tensorboardyt_tutorial.html>`_ ||
**Training Models** ||
`Model Understanding <captumyt.html>`_

Training with PyTorch
=====================

Follow along with the video below or on `youtube <https://www.youtube.com/watch?v=jF43_wj_DCQ>`__.

.. raw:: html

   <div style="margin-top:10px; margin-bottom:10px;">
     <iframe width="560" height="315" src="https://www.youtube.com/embed/jF43_wj_DCQ" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
   </div>

Introduction
------------

In past videos, we’ve discussed and demonstrated:

- Building models with the neural network layers and functions of the torch.nn module
- The mechanics of automated gradient computation, which is central to
  gradient-based model training 
- Using TensorBoard to visualize training progress and other activities

In this video, we’ll be adding some new tools to your inventory:

- We’ll get familiar with the dataset and dataloader abstractions, and how
  they ease the process of feeding data to your model during a training loop 
- We’ll discuss specific loss functions and when to use them
- We’ll look at PyTorch optimizers, which implement algorithms to adjust
  model weights based on the outcome of a loss function

Finally, we’ll pull all of these together and see a full PyTorch
training loop in action.


Dataset and DataLoader
----------------------
 
The ``Dataset`` and ``DataLoader`` classes encapsulate the process of
pulling your data from storage and exposing it to your training loop in
batches.

The ``Dataset`` is responsible for accessing and processing single
instances of data.
 
The ``DataLoader`` pulls instances of data from the ``Dataset`` (either
automatically or with a sampler that you define), collects them in
batches, and returns them for consumption by your training loop. The
``DataLoader`` works with all kinds of datasets, regardless of the type
of data they contain.
 
For this tutorial, we’ll be using the Fashion-MNIST dataset provided by
TorchVision. We use ``torchvision.transforms.Normalize()`` to
zero-center and normalize the distribution of the image tile content,
and download both training and validation data splits.

.. GENERATED FROM PYTHON SOURCE LINES 65-96

.. code-block:: default


    import torch
    import torchvision
    import torchvision.transforms as transforms

    # PyTorch TensorBoard support
    from torch.utils.tensorboard import SummaryWriter
    from datetime import datetime


    transform = transforms.Compose(
        [transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))])

    # Create datasets for training & validation, download if necessary
    training_set = torchvision.datasets.FashionMNIST('./data', train=True, transform=transform, download=True)
    validation_set = torchvision.datasets.FashionMNIST('./data', train=False, transform=transform, download=True)

    # Create data loaders for our datasets; shuffle for training, not for validation
    training_loader = torch.utils.data.DataLoader(training_set, batch_size=4, shuffle=True)
    validation_loader = torch.utils.data.DataLoader(validation_set, batch_size=4, shuffle=False)

    # Class labels
    classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
            'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot')

    # Report split sizes
    print('Training set has {} instances'.format(len(training_set)))
    print('Validation set has {} instances'.format(len(validation_set)))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz

      0%|          | 0/26421880 [00:00<?, ?it/s]
      0%|          | 32768/26421880 [00:00<01:26, 305278.11it/s]
      0%|          | 65536/26421880 [00:00<01:26, 303915.30it/s]
      0%|          | 131072/26421880 [00:00<00:59, 441403.06it/s]
      1%|          | 229376/26421880 [00:00<00:41, 625775.62it/s]
      2%|1         | 458752/26421880 [00:00<00:23, 1110649.64it/s]
      2%|2         | 589824/26421880 [00:00<00:22, 1144055.43it/s]
      3%|2         | 720896/26421880 [00:00<00:22, 1167090.79it/s]
      3%|3         | 884736/26421880 [00:00<00:20, 1276122.96it/s]
      4%|3         | 1048576/26421880 [00:00<00:18, 1350503.85it/s]
      5%|4         | 1212416/26421880 [00:01<00:18, 1399987.23it/s]
      5%|5         | 1376256/26421880 [00:01<00:17, 1435688.87it/s]
      6%|5         | 1540096/26421880 [00:01<00:17, 1460361.97it/s]
      6%|6         | 1703936/26421880 [00:01<00:16, 1477475.06it/s]
      7%|7         | 1867776/26421880 [00:01<00:16, 1490046.33it/s]
      8%|7         | 2031616/26421880 [00:01<00:16, 1498390.30it/s]
      8%|8         | 2195456/26421880 [00:01<00:16, 1503957.17it/s]
      9%|8         | 2359296/26421880 [00:01<00:15, 1507721.16it/s]
     10%|9         | 2523136/26421880 [00:01<00:15, 1510734.53it/s]
     10%|#         | 2686976/26421880 [00:02<00:15, 1512855.57it/s]
     11%|#         | 2850816/26421880 [00:02<00:15, 1513733.58it/s]
     11%|#1        | 3014656/26421880 [00:02<00:15, 1515225.74it/s]
     12%|#2        | 3211264/26421880 [00:02<00:14, 1604055.39it/s]
     13%|#2        | 3375104/26421880 [00:02<00:14, 1578535.44it/s]
     13%|#3        | 3538944/26421880 [00:02<00:14, 1560207.05it/s]
     14%|#4        | 3702784/26421880 [00:02<00:14, 1550258.91it/s]
     15%|#4        | 3899392/26421880 [00:02<00:13, 1625941.43it/s]
     15%|#5        | 4063232/26421880 [00:02<00:14, 1593717.33it/s]
     16%|#5        | 4227072/26421880 [00:03<00:14, 1576334.40it/s]
     17%|#6        | 4423680/26421880 [00:03<00:13, 1642407.77it/s]
     17%|#7        | 4620288/26421880 [00:03<00:12, 1692644.73it/s]
     18%|#8        | 4816896/26421880 [00:03<00:12, 1726872.19it/s]
     19%|#8        | 5013504/26421880 [00:03<00:12, 1751509.82it/s]
     20%|#9        | 5210112/26421880 [00:03<00:14, 1416710.97it/s]
     20%|##        | 5406720/26421880 [00:03<00:13, 1516734.07it/s]
     21%|##1       | 5570560/26421880 [00:03<00:13, 1519852.98it/s]
     22%|##1       | 5767168/26421880 [00:03<00:12, 1599301.32it/s]
     23%|##2       | 5963776/26421880 [00:04<00:12, 1659070.88it/s]
     23%|##3       | 6160384/26421880 [00:04<00:11, 1702836.51it/s]
     24%|##4       | 6356992/26421880 [00:04<00:11, 1734102.24it/s]
     25%|##4       | 6553600/26421880 [00:04<00:11, 1756606.30it/s]
     26%|##5       | 6750208/26421880 [00:04<00:11, 1775241.55it/s]
     26%|##6       | 6946816/26421880 [00:04<00:10, 1788942.82it/s]
     27%|##7       | 7143424/26421880 [00:04<00:10, 1798403.38it/s]
     28%|##7       | 7340032/26421880 [00:04<00:10, 1808554.26it/s]
     29%|##8       | 7536640/26421880 [00:04<00:10, 1812795.71it/s]
     29%|##9       | 7733248/26421880 [00:05<00:10, 1816330.20it/s]
     30%|###       | 7929856/26421880 [00:05<00:10, 1823790.07it/s]
     31%|###       | 8126464/26421880 [00:05<00:10, 1824874.20it/s]
     32%|###1      | 8355840/26421880 [00:05<00:09, 1912087.26it/s]
     32%|###2      | 8585216/26421880 [00:05<00:09, 1972472.50it/s]
     33%|###3      | 8814592/26421880 [00:05<00:08, 2014853.59it/s]
     34%|###4      | 9043968/26421880 [00:05<00:08, 2050952.51it/s]
     35%|###5      | 9273344/26421880 [00:05<00:08, 2076352.43it/s]
     36%|###5      | 9502720/26421880 [00:05<00:08, 2092599.80it/s]
     37%|###6      | 9764864/26421880 [00:06<00:07, 2189764.03it/s]
     38%|###7      | 10027008/26421880 [00:06<00:07, 2256568.57it/s]
     39%|###8      | 10256384/26421880 [00:06<00:07, 2224338.89it/s]
     40%|###9      | 10518528/26421880 [00:06<00:06, 2285862.70it/s]
     41%|####      | 10813440/26421880 [00:06<00:06, 2411914.38it/s]
     42%|####1     | 11075584/26421880 [00:06<00:06, 2420314.51it/s]
     43%|####3     | 11370496/26421880 [00:06<00:05, 2508698.44it/s]
     44%|####4     | 11665408/26421880 [00:06<00:05, 2571060.90it/s]
     45%|####5     | 11960320/26421880 [00:06<00:05, 2619666.32it/s]
     46%|####6     | 12255232/26421880 [00:07<00:05, 2657952.15it/s]
     47%|####7     | 12550144/26421880 [00:07<00:05, 2679361.77it/s]
     49%|####8     | 12877824/26421880 [00:07<00:04, 2784253.71it/s]
     50%|####9     | 13205504/26421880 [00:07<00:04, 2856688.28it/s]
     51%|#####1    | 13533184/26421880 [00:07<00:04, 2898708.31it/s]
     53%|#####2    | 13893632/26421880 [00:07<00:04, 3023039.07it/s]
     54%|#####3    | 14254080/26421880 [00:07<00:03, 3116605.80it/s]
     55%|#####5    | 14614528/26421880 [00:07<00:03, 3183408.97it/s]
     57%|#####6    | 14974976/26421880 [00:07<00:03, 3230485.10it/s]
     58%|#####8    | 15368192/26421880 [00:07<00:03, 3348573.82it/s]
     60%|#####9    | 15761408/26421880 [00:08<00:03, 3437142.98it/s]
     61%|######1   | 16154624/26421880 [00:08<00:02, 3500749.20it/s]
     63%|######2   | 16580608/26421880 [00:08<00:02, 3625055.49it/s]
     64%|######4   | 17006592/26421880 [00:08<00:02, 3721405.03it/s]
     66%|######5   | 17432576/26421880 [00:08<00:02, 3797299.27it/s]
     68%|######7   | 17891328/26421880 [00:08<00:02, 3918461.60it/s]
     69%|######9   | 18350080/26421880 [00:08<00:02, 4022138.36it/s]
     71%|#######1  | 18808832/26421880 [00:08<00:01, 4098799.65it/s]
     73%|#######3  | 19300352/26421880 [00:08<00:01, 4226655.86it/s]
     75%|#######4  | 19791872/26421880 [00:09<00:01, 4331709.38it/s]
     77%|#######6  | 20316160/26421880 [00:09<00:01, 4474484.49it/s]
     79%|#######8  | 20840448/26421880 [00:09<00:01, 4588849.65it/s]
     81%|########  | 21364736/26421880 [00:09<00:01, 4678367.34it/s]
     83%|########2 | 21921792/26421880 [00:09<00:00, 4815725.60it/s]
     85%|########5 | 22478848/26421880 [00:09<00:00, 4930238.36it/s]
     87%|########7 | 23068672/26421880 [00:09<00:00, 5078603.22it/s]
     90%|########9 | 23658496/26421880 [00:09<00:00, 5198594.13it/s]
     92%|#########1| 24281088/26421880 [00:09<00:00, 5355777.53it/s]
     94%|#########4| 24903680/26421880 [00:10<00:00, 5484269.72it/s]
     97%|#########6| 25526272/26421880 [00:10<00:00, 5588088.16it/s]
     99%|#########9| 26214400/26421880 [00:10<00:00, 5796316.13it/s]
    100%|##########| 26421880/26421880 [00:10<00:00, 2572939.95it/s]
    Extracting ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz

      0%|          | 0/29515 [00:00<?, ?it/s]
    100%|##########| 29515/29515 [00:00<00:00, 272435.92it/s]
    100%|##########| 29515/29515 [00:00<00:00, 271152.36it/s]
    Extracting ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz

      0%|          | 0/4422102 [00:00<?, ?it/s]
      1%|          | 32768/4422102 [00:00<00:14, 297075.38it/s]
      1%|1         | 65536/4422102 [00:00<00:14, 295688.46it/s]
      3%|2         | 131072/4422102 [00:00<00:09, 430020.40it/s]
      5%|5         | 229376/4422102 [00:00<00:06, 610333.44it/s]
     10%|#         | 458752/4422102 [00:00<00:03, 1134834.28it/s]
     20%|##        | 884736/4422102 [00:00<00:01, 2051941.55it/s]
     41%|####      | 1802240/4422102 [00:00<00:00, 4077176.22it/s]
     81%|########  | 3571712/4422102 [00:00<00:00, 7850148.83it/s]
    100%|##########| 4422102/4422102 [00:00<00:00, 4962276.58it/s]
    Extracting ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz

      0%|          | 0/5148 [00:00<?, ?it/s]
    100%|##########| 5148/5148 [00:00<00:00, 29218236.80it/s]
    Extracting ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Training set has 60000 instances
    Validation set has 10000 instances




.. GENERATED FROM PYTHON SOURCE LINES 97-99

As always, let’s visualize the data as a sanity check:


.. GENERATED FROM PYTHON SOURCE LINES 99-123

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    # Helper function for inline image display
    def matplotlib_imshow(img, one_channel=False):
        if one_channel:
            img = img.mean(dim=0)
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        if one_channel:
            plt.imshow(npimg, cmap="Greys")
        else:
            plt.imshow(np.transpose(npimg, (1, 2, 0)))

    dataiter = iter(training_loader)
    images, labels = next(dataiter)

    # Create a grid from the images and show them
    img_grid = torchvision.utils.make_grid(images)
    matplotlib_imshow(img_grid, one_channel=True)
    print('  '.join(classes[labels[j]] for j in range(4)))





.. image-sg:: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :alt: trainingyt
   :srcset: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Dress  Shirt  Dress  Ankle Boot




.. GENERATED FROM PYTHON SOURCE LINES 124-130

The Model
---------

The model we’ll use in this example is a variant of LeNet-5 - it should
be familiar if you’ve watched the previous videos in this series.


.. GENERATED FROM PYTHON SOURCE LINES 130-158

.. code-block:: default


    import torch.nn as nn
    import torch.nn.functional as F

    # PyTorch models inherit from torch.nn.Module
    class GarmentClassifier(nn.Module):
        def __init__(self):
            super(GarmentClassifier, self).__init__()
            self.conv1 = nn.Conv2d(1, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 4 * 4, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 4 * 4)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x
    

    model = GarmentClassifier()









.. GENERATED FROM PYTHON SOURCE LINES 159-166

Loss Function
-------------

For this example, we’ll be using a cross-entropy loss. For demonstration
purposes, we’ll create batches of dummy output and label values, run
them through the loss function, and examine the result.


.. GENERATED FROM PYTHON SOURCE LINES 166-182

.. code-block:: default


    loss_fn = torch.nn.CrossEntropyLoss()

    # NB: Loss functions expect data in batches, so we're creating batches of 4
    # Represents the model's confidence in each of the 10 classes for a given input
    dummy_outputs = torch.rand(4, 10)
    # Represents the correct class among the 10 being tested
    dummy_labels = torch.tensor([1, 5, 3, 7])
    
    print(dummy_outputs)
    print(dummy_labels)

    loss = loss_fn(dummy_outputs, dummy_labels)
    print('Total loss for this batch: {}'.format(loss.item()))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[0.7925, 0.1872, 0.0154, 0.4816, 0.1401, 0.5938, 0.4505, 0.0058, 0.6567,
             0.2238],
            [0.6430, 0.6101, 0.5484, 0.3398, 0.4654, 0.3490, 0.6987, 0.5071, 0.4581,
             0.2926],
            [0.9366, 0.0447, 0.1460, 0.7878, 0.1718, 0.0757, 0.8001, 0.6144, 0.0081,
             0.7355],
            [0.1028, 0.6309, 0.3137, 0.4612, 0.4513, 0.6163, 0.4801, 0.0986, 0.9194,
             0.4271]])
    tensor([1, 5, 3, 7])
    Total loss for this batch: 2.4121627807617188




.. GENERATED FROM PYTHON SOURCE LINES 183-200

Optimizer
---------

For this example, we’ll be using simple `stochastic gradient
descent <https://pytorch.org/docs/stable/optim.html>`__ with momentum.

It can be instructive to try some variations on this optimization
scheme:

- Learning rate determines the size of the steps the optimizer
  takes. What does a different learning rate do to the your training
  results, in terms of accuracy and convergence time?
- Momentum nudges the optimizer in the direction of strongest gradient over
  multiple steps. What does changing this value do to your results? 
- Try some different optimization algorithms, such as averaged SGD, Adagrad, or
  Adam. How do your results differ?


.. GENERATED FROM PYTHON SOURCE LINES 200-205

.. code-block:: default


    # Optimizers specified in the torch.optim package
    optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)









.. GENERATED FROM PYTHON SOURCE LINES 206-225

The Training Loop
-----------------

Below, we have a function that performs one training epoch. It
enumerates data from the DataLoader, and on each pass of the loop does
the following:

- Gets a batch of training data from the DataLoader
- Zeros the optimizer’s gradients 
- Performs an inference - that is, gets predictions from the model for an input batch
- Calculates the loss for that set of predictions vs. the labels on the dataset
- Calculates the backward gradients over the learning weights
- Tells the optimizer to perform one learning step - that is, adjust the model’s
  learning weights based on the observed gradients for this batch, according to the
  optimization algorithm we chose
- It reports on the loss for every 1000 batches.
- Finally, it reports the average per-batch loss for the last
  1000 batches, for comparison with a validation run


.. GENERATED FROM PYTHON SOURCE LINES 225-262

.. code-block:: default


    def train_one_epoch(epoch_index, tb_writer):
        running_loss = 0.
        last_loss = 0.
    
        # Here, we use enumerate(training_loader) instead of
        # iter(training_loader) so that we can track the batch
        # index and do some intra-epoch reporting
        for i, data in enumerate(training_loader):
            # Every data instance is an input + label pair
            inputs, labels = data
        
            # Zero your gradients for every batch!
            optimizer.zero_grad()
        
            # Make predictions for this batch
            outputs = model(inputs)
        
            # Compute the loss and its gradients
            loss = loss_fn(outputs, labels)
            loss.backward()
        
            # Adjust learning weights
            optimizer.step()
        
            # Gather data and report
            running_loss += loss.item()
            if i % 1000 == 999:
                last_loss = running_loss / 1000 # loss per batch
                print('  batch {} loss: {}'.format(i + 1, last_loss))
                tb_x = epoch_index * len(training_loader) + i + 1
                tb_writer.add_scalar('Loss/train', last_loss, tb_x)
                running_loss = 0.
            
        return last_loss









.. GENERATED FROM PYTHON SOURCE LINES 263-276

Per-Epoch Activity
~~~~~~~~~~~~~~~~~~

There are a couple of things we’ll want to do once per epoch: 

- Perform validation by checking our relative loss on a set of data that was not
  used for training, and report this 
- Save a copy of the model

Here, we’ll do our reporting in TensorBoard. This will require going to
the command line to start TensorBoard, and opening it in another browser
tab.


.. GENERATED FROM PYTHON SOURCE LINES 276-326

.. code-block:: default


    # Initializing in a separate cell so we can easily add more epochs to the same run
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    writer = SummaryWriter('runs/fashion_trainer_{}'.format(timestamp))
    epoch_number = 0

    EPOCHS = 5

    best_vloss = 1_000_000.

    for epoch in range(EPOCHS):
        print('EPOCH {}:'.format(epoch_number + 1))
    
        # Make sure gradient tracking is on, and do a pass over the data
        model.train(True)
        avg_loss = train_one_epoch(epoch_number, writer)
    

        running_vloss = 0.0
        # Set the model to evaluation mode, disabling dropout and using population 
        # statistics for batch normalization.
        model.eval()

        # Disable gradient computation and reduce memory consumption.
        with torch.no_grad():
            for i, vdata in enumerate(validation_loader):
                vinputs, vlabels = vdata
                voutputs = model(vinputs)
                vloss = loss_fn(voutputs, vlabels)
                running_vloss += vloss
    
        avg_vloss = running_vloss / (i + 1)
        print('LOSS train {} valid {}'.format(avg_loss, avg_vloss))
    
        # Log the running loss averaged per batch
        # for both training and validation
        writer.add_scalars('Training vs. Validation Loss',
                        { 'Training' : avg_loss, 'Validation' : avg_vloss },
                        epoch_number + 1)
        writer.flush()
    
        # Track best performance, and save the model's state
        if avg_vloss < best_vloss:
            best_vloss = avg_vloss
            model_path = 'model_{}_{}'.format(timestamp, epoch_number)
            torch.save(model.state_dict(), model_path)
    
        epoch_number += 1






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    EPOCH 1:
      batch 1000 loss: 1.8040172162652015
      batch 2000 loss: 0.8114896807782352
      batch 3000 loss: 0.7155233488697559
      batch 4000 loss: 0.6450531867225654
      batch 5000 loss: 0.6108462304454296
      batch 6000 loss: 0.5673903053724207
      batch 7000 loss: 0.5593328331462107
      batch 8000 loss: 0.5070545464679599
      batch 9000 loss: 0.49269121335889215
      batch 10000 loss: 0.4645233845058829
      batch 11000 loss: 0.48101773727918046
      batch 12000 loss: 0.4682482556561008
      batch 13000 loss: 0.4326584541472548
      batch 14000 loss: 0.43198119220600345
      batch 15000 loss: 0.41444451641867636
    LOSS train 0.41444451641867636 valid 0.4372314512729645
    EPOCH 2:
      batch 1000 loss: 0.4196261848944705
      batch 2000 loss: 0.4159362575329142
      batch 3000 loss: 0.39719601138975125
      batch 4000 loss: 0.40598791966447606
      batch 5000 loss: 0.39193866608518874
      batch 6000 loss: 0.4135505205218797
      batch 7000 loss: 0.3702095319850487
      batch 8000 loss: 0.38307122763799273
      batch 9000 loss: 0.36654525023075984
      batch 10000 loss: 0.368128871314053
      batch 11000 loss: 0.36217470466464147
      batch 12000 loss: 0.3440395978063607
      batch 13000 loss: 0.374228658903201
      batch 14000 loss: 0.3389351977331098
      batch 15000 loss: 0.3486400910878438
    LOSS train 0.3486400910878438 valid 0.37125396728515625
    EPOCH 3:
      batch 1000 loss: 0.3380514142633183
      batch 2000 loss: 0.3302949987655156
      batch 3000 loss: 0.34124813263257964
      batch 4000 loss: 0.3345157514882085
      batch 5000 loss: 0.311839098017299
      batch 6000 loss: 0.31618326092144705
      batch 7000 loss: 0.3295209834840334
      batch 8000 loss: 0.33651052997348596
      batch 9000 loss: 0.31580602350170556
      batch 10000 loss: 0.3567084562529635
      batch 11000 loss: 0.3343104514019942
      batch 12000 loss: 0.3295515738957911
      batch 13000 loss: 0.3399456940379023
      batch 14000 loss: 0.35551861154922515
      batch 15000 loss: 0.31745405739027593
    LOSS train 0.31745405739027593 valid 0.34933504462242126
    EPOCH 4:
      batch 1000 loss: 0.31657683911620554
      batch 2000 loss: 0.31250030951622465
      batch 3000 loss: 0.3215494708174083
      batch 4000 loss: 0.311467547203647
      batch 5000 loss: 0.2950050491283182
      batch 6000 loss: 0.31096075587984523
      batch 7000 loss: 0.30498626797445466
      batch 8000 loss: 0.3100826555245367
      batch 9000 loss: 0.30701203450186587
      batch 10000 loss: 0.29181181677153656
      batch 11000 loss: 0.3004495513934817
      batch 12000 loss: 0.3091245159468672
      batch 13000 loss: 0.2991246456051158
      batch 14000 loss: 0.2936917323144044
      batch 15000 loss: 0.3117055486212157
    LOSS train 0.3117055486212157 valid 0.336188942193985
    EPOCH 5:
      batch 1000 loss: 0.28579264393609627
      batch 2000 loss: 0.2833048344817653
      batch 3000 loss: 0.29758671378472357
      batch 4000 loss: 0.28369662316230826
      batch 5000 loss: 0.3135600942813326
      batch 6000 loss: 0.2940846569649293
      batch 7000 loss: 0.2809260031571339
      batch 8000 loss: 0.26697882457209926
      batch 9000 loss: 0.29094839840543135
      batch 10000 loss: 0.278000666752705
      batch 11000 loss: 0.298939054921786
      batch 12000 loss: 0.27843078223076373
      batch 13000 loss: 0.266968061453455
      batch 14000 loss: 0.27888119513734455
      batch 15000 loss: 0.28659068859224135
    LOSS train 0.28659068859224135 valid 0.3254297375679016




.. GENERATED FROM PYTHON SOURCE LINES 327-369

To load a saved version of the model:

.. code:: python

    saved_model = GarmentClassifier()
    saved_model.load_state_dict(torch.load(PATH))

Once you’ve loaded the model, it’s ready for whatever you need it for -
more training, inference, or analysis.

Note that if your model has constructor parameters that affect model
structure, you’ll need to provide them and configure the model
identically to the state in which it was saved.

Other Resources
---------------

-  Docs on the `data
   utilities <https://pytorch.org/docs/stable/data.html>`__, including
   Dataset and DataLoader, at pytorch.org
-  A `note on the use of pinned
   memory <https://pytorch.org/docs/stable/notes/cuda.html#cuda-memory-pinning>`__
   for GPU training
-  Documentation on the datasets available in
   `TorchVision <https://pytorch.org/vision/stable/datasets.html>`__,
   `TorchText <https://pytorch.org/text/stable/datasets.html>`__, and
   `TorchAudio <https://pytorch.org/audio/stable/datasets.html>`__
-  Documentation on the `loss
   functions <https://pytorch.org/docs/stable/nn.html#loss-functions>`__
   available in PyTorch
-  Documentation on the `torch.optim
   package <https://pytorch.org/docs/stable/optim.html>`__, which
   includes optimizers and related tools, such as learning rate
   scheduling
-  A detailed `tutorial on saving and loading
   models <https://pytorch.org/tutorials/beginner/saving_loading_models.html>`__
-  The `Tutorials section of
   pytorch.org <https://pytorch.org/tutorials/>`__ contains tutorials on
   a broad variety of training tasks, including classification in
   different domains, generative adversarial networks, reinforcement
   learning, and more 



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  1.262 seconds)


.. _sphx_glr_download_beginner_introyt_trainingyt.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: trainingyt.py <trainingyt.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: trainingyt.ipynb <trainingyt.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
