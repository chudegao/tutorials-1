
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/introyt/trainingyt.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_introyt_trainingyt.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_introyt_trainingyt.py:


`Introduction <introyt1_tutorial.html>`_ ||
`Tensors <tensors_deeper_tutorial.html>`_ ||
`Autograd <autogradyt_tutorial.html>`_ ||
`Building Models <modelsyt_tutorial.html>`_ ||
`TensorBoard Support <tensorboardyt_tutorial.html>`_ ||
**Training Models** ||
`Model Understanding <captumyt.html>`_

Training with PyTorch
=====================

Follow along with the video below or on `youtube <https://www.youtube.com/watch?v=jF43_wj_DCQ>`__.

.. raw:: html

   <div style="margin-top:10px; margin-bottom:10px;">
     <iframe width="560" height="315" src="https://www.youtube.com/embed/jF43_wj_DCQ" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
   </div>

Introduction
------------

In past videos, we’ve discussed and demonstrated:

- Building models with the neural network layers and functions of the torch.nn module
- The mechanics of automated gradient computation, which is central to
  gradient-based model training 
- Using TensorBoard to visualize training progress and other activities

In this video, we’ll be adding some new tools to your inventory:

- We’ll get familiar with the dataset and dataloader abstractions, and how
  they ease the process of feeding data to your model during a training loop 
- We’ll discuss specific loss functions and when to use them
- We’ll look at PyTorch optimizers, which implement algorithms to adjust
  model weights based on the outcome of a loss function

Finally, we’ll pull all of these together and see a full PyTorch
training loop in action.


Dataset and DataLoader
----------------------
 
The ``Dataset`` and ``DataLoader`` classes encapsulate the process of
pulling your data from storage and exposing it to your training loop in
batches.

The ``Dataset`` is responsible for accessing and processing single
instances of data.
 
The ``DataLoader`` pulls instances of data from the ``Dataset`` (either
automatically or with a sampler that you define), collects them in
batches, and returns them for consumption by your training loop. The
``DataLoader`` works with all kinds of datasets, regardless of the type
of data they contain.
 
For this tutorial, we’ll be using the Fashion-MNIST dataset provided by
TorchVision. We use ``torchvision.transforms.Normalize()`` to
zero-center and normalize the distribution of the image tile content,
and download both training and validation data splits.

.. GENERATED FROM PYTHON SOURCE LINES 65-96

.. code-block:: default


    import torch
    import torchvision
    import torchvision.transforms as transforms

    # PyTorch TensorBoard support
    from torch.utils.tensorboard import SummaryWriter
    from datetime import datetime


    transform = transforms.Compose(
        [transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))])

    # Create datasets for training & validation, download if necessary
    training_set = torchvision.datasets.FashionMNIST('./data', train=True, transform=transform, download=True)
    validation_set = torchvision.datasets.FashionMNIST('./data', train=False, transform=transform, download=True)

    # Create data loaders for our datasets; shuffle for training, not for validation
    training_loader = torch.utils.data.DataLoader(training_set, batch_size=4, shuffle=True)
    validation_loader = torch.utils.data.DataLoader(validation_set, batch_size=4, shuffle=False)

    # Class labels
    classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
            'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot')

    # Report split sizes
    print('Training set has {} instances'.format(len(training_set)))
    print('Validation set has {} instances'.format(len(validation_set)))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz

      0%|          | 0/26421880 [00:00<?, ?it/s]
      0%|          | 32768/26421880 [00:00<01:27, 302160.59it/s]
      0%|          | 65536/26421880 [00:00<01:27, 301165.08it/s]
      0%|          | 131072/26421880 [00:00<01:00, 437547.09it/s]
      1%|          | 229376/26421880 [00:00<00:42, 621130.42it/s]
      2%|1         | 491520/26421880 [00:00<00:20, 1262706.97it/s]
      4%|3         | 950272/26421880 [00:00<00:11, 2264528.64it/s]
      7%|7         | 1933312/26421880 [00:00<00:05, 4470485.93it/s]
     15%|#4        | 3833856/26421880 [00:00<00:02, 8594713.85it/s]
     26%|##6       | 6881280/26421880 [00:00<00:01, 14645393.68it/s]
     34%|###4      | 9043968/26421880 [00:01<00:01, 16160567.14it/s]
     45%|####5     | 11894784/26421880 [00:01<00:00, 19258088.48it/s]
     57%|#####6    | 14942208/26421880 [00:01<00:00, 21888216.27it/s]
     67%|######7   | 17760256/26421880 [00:01<00:00, 23069361.73it/s]
     79%|#######8  | 20742144/26421880 [00:01<00:00, 24381063.42it/s]
     90%|######### | 23855104/26421880 [00:01<00:00, 25583412.15it/s]
    100%|##########| 26421880/26421880 [00:01<00:00, 15967882.08it/s]
    Extracting ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz

      0%|          | 0/29515 [00:00<?, ?it/s]
    100%|##########| 29515/29515 [00:00<00:00, 269508.34it/s]
    100%|##########| 29515/29515 [00:00<00:00, 268346.36it/s]
    Extracting ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz

      0%|          | 0/4422102 [00:00<?, ?it/s]
      1%|          | 32768/4422102 [00:00<00:14, 296569.60it/s]
      1%|1         | 65536/4422102 [00:00<00:14, 295509.96it/s]
      3%|2         | 131072/4422102 [00:00<00:09, 429609.51it/s]
      5%|5         | 229376/4422102 [00:00<00:06, 609761.36it/s]
     11%|#1        | 491520/4422102 [00:00<00:03, 1239367.17it/s]
     21%|##1       | 950272/4422102 [00:00<00:01, 2222233.44it/s]
     44%|####3     | 1933312/4422102 [00:00<00:00, 4383922.87it/s]
     87%|########6 | 3833856/4422102 [00:00<00:00, 8435216.58it/s]
    100%|##########| 4422102/4422102 [00:00<00:00, 4963469.07it/s]
    Extracting ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz

      0%|          | 0/5148 [00:00<?, ?it/s]
    100%|##########| 5148/5148 [00:00<00:00, 30670848.00it/s]
    Extracting ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Training set has 60000 instances
    Validation set has 10000 instances




.. GENERATED FROM PYTHON SOURCE LINES 97-99

As always, let’s visualize the data as a sanity check:


.. GENERATED FROM PYTHON SOURCE LINES 99-123

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    # Helper function for inline image display
    def matplotlib_imshow(img, one_channel=False):
        if one_channel:
            img = img.mean(dim=0)
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        if one_channel:
            plt.imshow(npimg, cmap="Greys")
        else:
            plt.imshow(np.transpose(npimg, (1, 2, 0)))

    dataiter = iter(training_loader)
    images, labels = next(dataiter)

    # Create a grid from the images and show them
    img_grid = torchvision.utils.make_grid(images)
    matplotlib_imshow(img_grid, one_channel=True)
    print('  '.join(classes[labels[j]] for j in range(4)))





.. image-sg:: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :alt: trainingyt
   :srcset: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Ankle Boot  Sneaker  Trouser  Dress




.. GENERATED FROM PYTHON SOURCE LINES 124-130

The Model
---------

The model we’ll use in this example is a variant of LeNet-5 - it should
be familiar if you’ve watched the previous videos in this series.


.. GENERATED FROM PYTHON SOURCE LINES 130-158

.. code-block:: default


    import torch.nn as nn
    import torch.nn.functional as F

    # PyTorch models inherit from torch.nn.Module
    class GarmentClassifier(nn.Module):
        def __init__(self):
            super(GarmentClassifier, self).__init__()
            self.conv1 = nn.Conv2d(1, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 4 * 4, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 4 * 4)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x
    

    model = GarmentClassifier()









.. GENERATED FROM PYTHON SOURCE LINES 159-166

Loss Function
-------------

For this example, we’ll be using a cross-entropy loss. For demonstration
purposes, we’ll create batches of dummy output and label values, run
them through the loss function, and examine the result.


.. GENERATED FROM PYTHON SOURCE LINES 166-182

.. code-block:: default


    loss_fn = torch.nn.CrossEntropyLoss()

    # NB: Loss functions expect data in batches, so we're creating batches of 4
    # Represents the model's confidence in each of the 10 classes for a given input
    dummy_outputs = torch.rand(4, 10)
    # Represents the correct class among the 10 being tested
    dummy_labels = torch.tensor([1, 5, 3, 7])
    
    print(dummy_outputs)
    print(dummy_labels)

    loss = loss_fn(dummy_outputs, dummy_labels)
    print('Total loss for this batch: {}'.format(loss.item()))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[0.0451, 0.3602, 0.3137, 0.5931, 0.4221, 0.3339, 0.4994, 0.2485, 0.2279,
             0.8583],
            [0.8700, 0.3239, 0.6795, 0.9273, 0.7011, 0.3325, 0.0710, 0.9066, 0.8421,
             0.2598],
            [0.0072, 0.4583, 0.5329, 0.1183, 0.5477, 0.2139, 0.9248, 0.4015, 0.7549,
             0.2334],
            [0.0905, 0.6881, 0.2853, 0.7700, 0.0339, 0.2091, 0.6246, 0.6967, 0.5533,
             0.0543]])
    tensor([1, 5, 3, 7])
    Total loss for this batch: 2.411498546600342




.. GENERATED FROM PYTHON SOURCE LINES 183-200

Optimizer
---------

For this example, we’ll be using simple `stochastic gradient
descent <https://pytorch.org/docs/stable/optim.html>`__ with momentum.

It can be instructive to try some variations on this optimization
scheme:

- Learning rate determines the size of the steps the optimizer
  takes. What does a different learning rate do to the your training
  results, in terms of accuracy and convergence time?
- Momentum nudges the optimizer in the direction of strongest gradient over
  multiple steps. What does changing this value do to your results? 
- Try some different optimization algorithms, such as averaged SGD, Adagrad, or
  Adam. How do your results differ?


.. GENERATED FROM PYTHON SOURCE LINES 200-205

.. code-block:: default


    # Optimizers specified in the torch.optim package
    optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)









.. GENERATED FROM PYTHON SOURCE LINES 206-225

The Training Loop
-----------------

Below, we have a function that performs one training epoch. It
enumerates data from the DataLoader, and on each pass of the loop does
the following:

- Gets a batch of training data from the DataLoader
- Zeros the optimizer’s gradients 
- Performs an inference - that is, gets predictions from the model for an input batch
- Calculates the loss for that set of predictions vs. the labels on the dataset
- Calculates the backward gradients over the learning weights
- Tells the optimizer to perform one learning step - that is, adjust the model’s
  learning weights based on the observed gradients for this batch, according to the
  optimization algorithm we chose
- It reports on the loss for every 1000 batches.
- Finally, it reports the average per-batch loss for the last
  1000 batches, for comparison with a validation run


.. GENERATED FROM PYTHON SOURCE LINES 225-262

.. code-block:: default


    def train_one_epoch(epoch_index, tb_writer):
        running_loss = 0.
        last_loss = 0.
    
        # Here, we use enumerate(training_loader) instead of
        # iter(training_loader) so that we can track the batch
        # index and do some intra-epoch reporting
        for i, data in enumerate(training_loader):
            # Every data instance is an input + label pair
            inputs, labels = data
        
            # Zero your gradients for every batch!
            optimizer.zero_grad()
        
            # Make predictions for this batch
            outputs = model(inputs)
        
            # Compute the loss and its gradients
            loss = loss_fn(outputs, labels)
            loss.backward()
        
            # Adjust learning weights
            optimizer.step()
        
            # Gather data and report
            running_loss += loss.item()
            if i % 1000 == 999:
                last_loss = running_loss / 1000 # loss per batch
                print('  batch {} loss: {}'.format(i + 1, last_loss))
                tb_x = epoch_index * len(training_loader) + i + 1
                tb_writer.add_scalar('Loss/train', last_loss, tb_x)
                running_loss = 0.
            
        return last_loss









.. GENERATED FROM PYTHON SOURCE LINES 263-276

Per-Epoch Activity
~~~~~~~~~~~~~~~~~~

There are a couple of things we’ll want to do once per epoch: 

- Perform validation by checking our relative loss on a set of data that was not
  used for training, and report this 
- Save a copy of the model

Here, we’ll do our reporting in TensorBoard. This will require going to
the command line to start TensorBoard, and opening it in another browser
tab.


.. GENERATED FROM PYTHON SOURCE LINES 276-326

.. code-block:: default


    # Initializing in a separate cell so we can easily add more epochs to the same run
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    writer = SummaryWriter('runs/fashion_trainer_{}'.format(timestamp))
    epoch_number = 0

    EPOCHS = 5

    best_vloss = 1_000_000.

    for epoch in range(EPOCHS):
        print('EPOCH {}:'.format(epoch_number + 1))
    
        # Make sure gradient tracking is on, and do a pass over the data
        model.train(True)
        avg_loss = train_one_epoch(epoch_number, writer)
    

        running_vloss = 0.0
        # Set the model to evaluation mode, disabling dropout and using population 
        # statistics for batch normalization.
        model.eval()

        # Disable gradient computation and reduce memory consumption.
        with torch.no_grad():
            for i, vdata in enumerate(validation_loader):
                vinputs, vlabels = vdata
                voutputs = model(vinputs)
                vloss = loss_fn(voutputs, vlabels)
                running_vloss += vloss
    
        avg_vloss = running_vloss / (i + 1)
        print('LOSS train {} valid {}'.format(avg_loss, avg_vloss))
    
        # Log the running loss averaged per batch
        # for both training and validation
        writer.add_scalars('Training vs. Validation Loss',
                        { 'Training' : avg_loss, 'Validation' : avg_vloss },
                        epoch_number + 1)
        writer.flush()
    
        # Track best performance, and save the model's state
        if avg_vloss < best_vloss:
            best_vloss = avg_vloss
            model_path = 'model_{}_{}'.format(timestamp, epoch_number)
            torch.save(model.state_dict(), model_path)
    
        epoch_number += 1






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    EPOCH 1:
      batch 1000 loss: 1.9593049446046353
      batch 2000 loss: 0.8696276570260525
      batch 3000 loss: 0.706015863087494
      batch 4000 loss: 0.6372412034245208
      batch 5000 loss: 0.5861754020431544
      batch 6000 loss: 0.5744496204652824
      batch 7000 loss: 0.5399867594293318
      batch 8000 loss: 0.5409898689707042
      batch 9000 loss: 0.5080414364961907
      batch 10000 loss: 0.4732403616392985
      batch 11000 loss: 0.4753571043754928
      batch 12000 loss: 0.4667349948293995
      batch 13000 loss: 0.41826705991872587
      batch 14000 loss: 0.4527250068854191
      batch 15000 loss: 0.41602965268678965
    LOSS train 0.41602965268678965 valid 0.41755619645118713
    EPOCH 2:
      batch 1000 loss: 0.40057343656582817
      batch 2000 loss: 0.4014440497386968
      batch 3000 loss: 0.3878114333806443
      batch 4000 loss: 0.3994733409084438
      batch 5000 loss: 0.3895588125593495
      batch 6000 loss: 0.38405630684801145
      batch 7000 loss: 0.3764523017392494
      batch 8000 loss: 0.37415554565622006
      batch 9000 loss: 0.3873239439355675
      batch 10000 loss: 0.38119636193703627
      batch 11000 loss: 0.3697297326609405
      batch 12000 loss: 0.35830914046759427
      batch 13000 loss: 0.35142763681313227
      batch 14000 loss: 0.3509414720592904
      batch 15000 loss: 0.33006509593868394
    LOSS train 0.33006509593868394 valid 0.37067192792892456
    EPOCH 3:
      batch 1000 loss: 0.32762947942584286
      batch 2000 loss: 0.3479907318245969
      batch 3000 loss: 0.3190868721206207
      batch 4000 loss: 0.3307316718631773
      batch 5000 loss: 0.32026050469650363
      batch 6000 loss: 0.33102100510025045
      batch 7000 loss: 0.3461274122925679
      batch 8000 loss: 0.3261185557972567
      batch 9000 loss: 0.3384757869629102
      batch 10000 loss: 0.3126118182464852
      batch 11000 loss: 0.31192888434854105
      batch 12000 loss: 0.32521958418679425
      batch 13000 loss: 0.3208847542245203
      batch 14000 loss: 0.337543601490368
      batch 15000 loss: 0.3141712271242141
    LOSS train 0.3141712271242141 valid 0.3444039523601532
    EPOCH 4:
      batch 1000 loss: 0.31205731123863373
      batch 2000 loss: 0.29748400924220186
      batch 3000 loss: 0.2900130115646825
      batch 4000 loss: 0.31904604718749396
      batch 5000 loss: 0.2896670976275345
      batch 6000 loss: 0.3000800259219104
      batch 7000 loss: 0.32075329819496257
      batch 8000 loss: 0.2822336155285302
      batch 9000 loss: 0.29194541947136166
      batch 10000 loss: 0.2796350716832876
      batch 11000 loss: 0.2953923809998378
      batch 12000 loss: 0.27968105844050295
      batch 13000 loss: 0.27281492965779397
      batch 14000 loss: 0.31576935428401337
      batch 15000 loss: 0.2983716927292044
    LOSS train 0.2983716927292044 valid 0.32646292448043823
    EPOCH 5:
      batch 1000 loss: 0.28185473948111756
      batch 2000 loss: 0.28124885246832493
      batch 3000 loss: 0.2710526551215808
      batch 4000 loss: 0.2863069463015236
      batch 5000 loss: 0.2847234920996125
      batch 6000 loss: 0.2776469085406352
      batch 7000 loss: 0.2628976965106558
      batch 8000 loss: 0.27438963924279325
      batch 9000 loss: 0.2914099152711497
      batch 10000 loss: 0.2689118799439129
      batch 11000 loss: 0.28334069404227014
      batch 12000 loss: 0.28915115126195634
      batch 13000 loss: 0.2671481691355366
      batch 14000 loss: 0.2813736384831136
      batch 15000 loss: 0.26497655774810847
    LOSS train 0.26497655774810847 valid 0.3220483958721161




.. GENERATED FROM PYTHON SOURCE LINES 327-369

To load a saved version of the model:

.. code:: python

    saved_model = GarmentClassifier()
    saved_model.load_state_dict(torch.load(PATH))

Once you’ve loaded the model, it’s ready for whatever you need it for -
more training, inference, or analysis.

Note that if your model has constructor parameters that affect model
structure, you’ll need to provide them and configure the model
identically to the state in which it was saved.

Other Resources
---------------

-  Docs on the `data
   utilities <https://pytorch.org/docs/stable/data.html>`__, including
   Dataset and DataLoader, at pytorch.org
-  A `note on the use of pinned
   memory <https://pytorch.org/docs/stable/notes/cuda.html#cuda-memory-pinning>`__
   for GPU training
-  Documentation on the datasets available in
   `TorchVision <https://pytorch.org/vision/stable/datasets.html>`__,
   `TorchText <https://pytorch.org/text/stable/datasets.html>`__, and
   `TorchAudio <https://pytorch.org/audio/stable/datasets.html>`__
-  Documentation on the `loss
   functions <https://pytorch.org/docs/stable/nn.html#loss-functions>`__
   available in PyTorch
-  Documentation on the `torch.optim
   package <https://pytorch.org/docs/stable/optim.html>`__, which
   includes optimizers and related tools, such as learning rate
   scheduling
-  A detailed `tutorial on saving and loading
   models <https://pytorch.org/tutorials/beginner/saving_loading_models.html>`__
-  The `Tutorials section of
   pytorch.org <https://pytorch.org/tutorials/>`__ contains tutorials on
   a broad variety of training tasks, including classification in
   different domains, generative adversarial networks, reinforcement
   learning, and more 



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  44.282 seconds)


.. _sphx_glr_download_beginner_introyt_trainingyt.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: trainingyt.py <trainingyt.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: trainingyt.ipynb <trainingyt.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
