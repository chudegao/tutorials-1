
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 1.6090,  3.8330, 14.7911,  6.6531,  3.8456],
            [ 4.5483,  9.2668,  4.7264, 12.7852,  5.9326],
            [ 7.9834,  2.8778,  8.6597, 17.3739, 11.2545],
            [ 5.6293,  5.7963,  8.2389, 12.5741,  4.1893],
            [ 8.8981,  4.3182,  5.0759,  7.6438, 16.9757],
            [ 5.6293,  9.7604,  4.6677,  8.6477,  4.1893],
            [ 7.9834, 11.7067,  8.4581, 10.1817, 11.2545],
            [ 4.5483,  8.6996,  7.3759,  4.7518,  5.9326]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.7504, -0.9690,  0.8630, -1.6197, -1.6725, -0.4685, -1.7445,  0.9487],
            [-0.9280, -1.5097,  1.5907,  0.6731, -0.1847, -0.6427, -0.3796,  1.1253],
            [ 0.0753,  0.2803, -0.3481, -0.5715, -0.0047, -0.3012,  2.5221, -1.1636],
            [ 0.5058,  1.1961, -0.7218,  1.3591, -0.2599,  0.4125, -0.5679, -0.0772],
            [-1.7074, -1.6319,  2.2523,  0.2278,  1.6132,  0.3215, -0.4104, -1.0181],
            [-1.6144,  0.1579,  0.2449,  0.3302, -0.1379, -1.0926,  1.9536, -0.2293],
            [ 2.0032, -2.3923,  0.8280,  0.7264, -1.7117,  0.0250,  0.7710, -0.2260],
            [ 0.6190,  0.3871,  0.2632,  1.6696, -1.0026,  0.1722, -0.8406,  1.1731]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 2.4448, -0.5261, -0.1861],
            [ 0.3139,  0.1911,  0.7330],
            [-0.1426,  0.2810,  0.4169]], requires_grad=True), Parameter containing:
    tensor([[1.6741]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.7635,  4.3241,  5.9636, -2.3965,  3.0289, -1.6924,  0.6020,  0.8384],
            [-4.8372,  2.5670,  5.4652,  1.5409,  4.3300,  2.3766,  1.2135,  5.3177],
            [ 3.5270,  2.9965, -0.3210,  8.7235,  2.1605,  1.4529,  4.2133,  0.5727],
            [-2.8891,  1.0242, -0.2807,  1.4051,  3.4609,  2.2656,  4.6086, -1.4126],
            [ 1.3932,  1.7938,  3.8329, -0.6253,  2.4254, -3.3046,  1.3018,  3.0477],
            [ 2.6105,  0.4518,  3.1321,  1.1685,  2.3486,  2.8887, -2.9615,  0.4407],
            [ 0.7674,  5.0933,  1.4438,  3.8063,  1.0726,  5.6746,  2.9436,  1.8297],
            [ 1.7478,  6.2802,  0.6809,  0.3638,  2.0517,  9.1767, -3.1376,  2.4199]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-5.7609e+00,  6.1796e+00, -2.3033e+00,  1.8663e+00,  2.3600e+00,
             -9.6457e-01,  2.0560e-01,  1.3638e+00, -3.3242e-01, -1.0813e-01],
            [-1.2459e+00, -6.0730e+00,  3.4127e+00,  3.5366e+00,  7.2757e-03,
             -1.1956e+00, -5.2792e+00, -6.0607e-01,  1.1831e+00,  5.9596e-01],
            [ 6.9050e-01,  6.5495e-01,  2.1595e+00, -6.0711e+00,  6.5483e-01,
              3.3711e+00, -1.5400e-01,  2.3522e+00, -2.7392e+00, -7.2599e-01],
            [-1.4747e+00,  8.9594e-01,  1.8854e+00, -3.1658e+00,  4.7042e+00,
             -1.5905e+00,  3.1663e+00, -8.0272e-01, -1.0842e+00,  8.1717e-01],
            [-1.9655e+00, -4.0436e+00,  2.0810e-01,  3.3030e+00, -5.9700e+00,
             -4.5800e+00,  1.6548e+00, -1.4264e+00,  1.9740e+00,  7.3624e-01],
            [-4.1710e+00,  1.8893e+00,  9.6336e-01, -4.7144e-01, -1.2299e+00,
             -4.8141e+00,  1.4240e+00, -4.4183e+00,  4.2669e-01, -4.7876e-01],
            [-2.0498e+00,  8.8937e-01, -4.3156e+00, -2.6646e+00,  2.4496e+00,
             -1.4896e+00, -4.2464e+00,  3.4710e+00, -6.4942e-01, -1.5747e+00],
            [-2.7380e+00,  2.6262e+00,  9.6676e-02, -2.5253e+00, -1.8690e+00,
              1.8231e+00, -2.1459e+00,  1.8708e+00, -7.7068e-01,  8.2238e-01],
            [-2.5965e-01, -9.5574e-02, -4.2721e-01,  6.4469e-01, -6.6062e-01,
             -9.0643e-01, -3.5097e-01, -4.1392e-02, -3.9624e-02,  1.4514e+00],
            [ 1.6122e-01, -4.7272e-01, -2.7550e-01,  7.8634e-01,  1.8391e-01,
             -6.4161e-01,  5.6423e-03,  1.2551e-01,  9.7805e-02,  3.5366e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.665 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
