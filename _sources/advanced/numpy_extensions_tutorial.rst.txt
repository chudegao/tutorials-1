
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.4453,  3.3610,  8.7167,  7.4702,  1.0891],
            [10.2267,  6.1523, 11.5716, 12.2710,  3.3522],
            [11.3236,  3.2538,  7.8163,  1.8791, 10.1095],
            [17.9978,  3.8655,  9.8254,  6.1725,  7.6453],
            [ 0.3111,  2.3461,  8.4340,  3.9138,  0.2526],
            [17.9978,  8.1325,  7.8699,  7.5078,  7.6453],
            [11.3236, 14.6623,  5.1156,  6.1198, 10.1095],
            [10.2267,  6.2718, 10.6140,  7.3556,  3.3522]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.5436, -0.2365, -0.2590,  0.2629, -0.0059, -0.3832, -0.3795,  0.6028],
            [-1.7077, -0.3143,  1.1924, -1.5280,  1.5787,  0.4573,  0.1256, -0.2289],
            [ 0.3547, -0.2843, -1.8987, -1.3669,  0.5326, -0.9918, -0.3773,  0.1399],
            [ 1.6235,  0.8656,  0.5092, -0.0320,  0.7026, -0.8622, -1.4229,  0.7519],
            [ 0.4113,  0.4101, -1.6475,  1.2390,  0.5696, -0.3529, -2.5858, -1.7306],
            [ 0.1993,  0.4269, -0.3740,  1.4626, -0.3920,  0.3661,  1.0546,  0.0699],
            [ 1.0592,  0.5391,  2.1722,  0.1175,  1.3719,  0.3946,  0.9513,  1.0366],
            [-0.7552,  0.6115, -0.7251, -2.5032, -1.2104,  0.6653, -1.3914, -0.7828]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0989,  0.3040,  0.8423],
            [-0.6001, -0.0910, -0.2135],
            [-1.0448,  1.2578,  0.8100]], requires_grad=True), Parameter containing:
    tensor([[1.2315]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.1294,  4.9728,  0.1580, -1.8241,  1.6665, -1.5653,  1.2651,  1.1113],
            [ 1.2066,  1.8829,  2.6497,  4.8406, -3.3348,  1.1275,  7.3345,  0.6676],
            [-0.6035, -1.6672,  0.7601,  0.4364,  0.4926,  1.4871,  2.2935, -2.3620],
            [ 5.1607, -1.6672,  5.9745,  2.2176, -2.4390,  2.8816,  1.6129,  0.0747],
            [-1.9337,  0.7508,  2.1224, -1.1710,  3.3626,  0.6121,  1.4995,  1.4924],
            [ 0.7051,  1.5694,  2.6999, -0.4406,  7.6502,  0.2788,  0.4971,  0.3209],
            [ 3.3524,  3.7553, -2.2981, -0.5519,  2.1957,  1.1203, -2.1365,  3.2091],
            [ 3.7013, -0.4883, -0.9667,  4.6131,  3.3367,  3.4035,  0.3627,  2.3273]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1293,  0.6253,  0.3015, -1.6637,  0.9423,  0.0434,  0.0762,  0.3616,
             -0.4819,  0.5189],
            [-0.8326,  1.4155, -0.3615,  0.4919,  0.8187,  0.0926,  0.9920, -1.0636,
             -0.9575, -0.9982],
            [-1.6857,  4.2339, -3.6507, -2.4433,  0.0353, -1.4110,  0.5851, -2.6062,
             -1.0389,  0.6686],
            [-0.6521,  1.3426, -0.5883,  1.5327,  2.4226,  2.9578,  1.1101, -1.0107,
             -1.5285, -0.7023],
            [-0.2815,  2.2817,  0.3623, -0.7660, -1.1410,  0.2443, -1.8940, -3.7474,
             -0.3276,  1.3144],
            [-0.6119, -0.3866, -1.5273,  1.6551,  1.4340,  0.2312, -3.2274, -1.0040,
              1.2399,  0.0270],
            [-1.7058,  1.3949,  4.2021,  1.6517, -1.3653, -0.9957, -1.0877, -1.0083,
              2.9699,  0.9371],
            [-0.7380,  0.4879, -0.5755, -0.8138, -0.9229, -1.6031, -0.9521,  2.7324,
              1.8444,  1.0470],
            [-0.6906,  0.5683, -0.4134,  0.5712, -0.0929,  1.3598, -0.0402,  0.9551,
              0.0618, -0.5009],
            [ 0.2805, -0.8615, -0.0772,  0.7100,  0.4519,  0.1229,  0.5074, -0.2811,
              1.2247,  0.6794]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.108 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
