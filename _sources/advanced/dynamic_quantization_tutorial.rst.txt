
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'They' b'put' b'<unk>' b'lanes' b'from' b'purification' b';' b'in' b'Roxas' b"'s" b'range' b'is' b'a' b'extraordinary' b'nest' b'.' b'Over' b'this' b'year'
    b'they' b'have' b'made' b'the' b'name' b'as' b'an' b'whole' b'in' b'garner' b'support' b',' b'and' b'this' b'feathers' b'arrived' b'in' b'the' b'<unk>' b'and'
    b'it' b'has' b'suggested' b'that' b'the' b'bird' b'was' b'"' b'kept' b'out' b'stranded' b'from' b'your' b'first' b'albums' b'of' b'his' b'duty' b'was' b'from'
    b'any' b'games' b'to' b'end' b'very' b'brilliant' b'bird' b'"' b'.' b'Crown' b'Nameless' b'Button' b'observed' b'these' b'fast' b'shots' b'thought' b'their' b'subject' b'.'
    b'The' b'builder' b'describes' b'the' b'disputes' b'of' b'Zenobia' b'and' b'hired' b'it' b'at' b'ditch' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Track' b'literature' b'='
    b'=' b'<eos>' b'<eos>' b'Ceres' b'embarrassing' b'Crash' b'Boom' b'Bang' b'!' b'However' b'as' b'an' b'city' b',' b'who' b'regard' b'land' b'a' b'brain' b'@-@'
    b'like' b'game' b'with' b'an' b'Formula' b'One' b'game' b',' b'a' b'<unk>' b',' b'a' b'urn' b'of' b'the' b'double' b',' b'so' b'Larwood' b'describes'
    b'the' b'Earth' b',' b'and' b'a' b'attorney' b'.' b'The' b'drive' b'from' b'his' b'full' b'end' b'who' b'leaves' b'the' b'dig' b',' b'when' b'echoed'
    b'"' b'reflective' b'deformed' b'him' b'spirit' b'I' b'finds' b'the' b'clearing' b',' b'at' b'any' b'.' b'"' b'Over' b'these' b'years' b'they' b'sustained' b'down'
    b'on' b'themselves' b',' b'citing' b'Firecracker' b'and' b'lives' b'on' b'civilian' b'anti' b'@-@' b'Carrington' b'and' b'he' b'begins' b'writing' b'the' b'slide' b'extensively' b'as'
    b'the' b'dark' b'.' b'Once' b'he' b'would' b'have' b',' b'and' b'on' b'fortunate' b'Lambton' b'or' b'other' b'return' b',' b'<unk>' b'must' b'be' b'a'
    b'succession' b'of' b'museums' b'and' b'to' b'kill' b'their' b'big' b'as' b'they' b'have' b'gone' b'fighting' b'but' b'on' b'Revolution' b'.' b'They' b'comprised' b'other'
    b'support' b'such' b'as' b'<unk>' b'cabinet' b',' b'<unk>' b'realistic' b',' b'even' b'she' b'analyzed' b'implying' b'with' b'the' b'creature' b'itself' b'.' b'After' b'his'
    b'increase' b'it' b'is' b'known' b'to' b'reveals' b'marriage' b'where' b'other' b'of' b'them' b'visualize' b'the' b'first' b'intimate' b'@-@' b'taste' b'page' b'.' b'<eos>'
    b'In' b'the' b'other' b'study' b'of' b'inflict' b'criminal' b'doubts' b',' b'pockets' b'of' b'his' b'vision' b'@-@' b'<unk>' b'the' b'fault' b'of' b'pharaoh' b','
    b'the' b'terminates' b'of' b'pad' b',' b'any' b'of' b'the' b'sex' b'species' b'on' b'his' b'generation' b'to' b'Banai' b'.' b'This' b'led' b'his' b'scene'
    b'in' b'military' b'natural' b',' b'and' b'an' b'positive' b'<unk>' b'indicates' b'themselves' b'it' b'.' b'At' b'<unk>' b',' b'the' b'situation' b'of' b'Haraldr' b'receives'
    b'<unk>' b'.' b'Most' b'stories' b'tend' b'on' b',' b'handles' b'Irresistible' b',' b'select' b'keys' b'for' b'cricket' b'.' b'extirpated' b'the' b'Louis' b'Number' b'GTX'
    b'on' b'<unk>' b':' b'E.' b'HMC' b'is' b'long' b'as' b'"' b'vulnerable' b'as' b'a' b'kind' b'of' b'easy' b'origin' b'and' b'to' b'eliminate' b'it'
    b'to' b'open' b'power' b'"' b'.' b'In' b'2008' b'he' b'Webster' b',' b'a' b'necrophiliac' b'for' b'a' b'study' b'of' b'<unk>' b',' b'notes' b'that'
    b'it' b'is' b'effectively' b'Baker' b"'" b'active' b'equator' b',' b'living' b'in' b'the' b'category' b'of' b'1765' b'.' b'Daniel' b'Perrin' b'of' b'the' b'Ancients'
    b'Love' b'approximately' b'50' b'years' b'that' b'was' b'falling' b'to' b'date' b'.' b'The' b'following' b'year' b',' b'he' b'reasoned' b'down' b'a' b'race' b'by'
    b'fact' b'.' b'He' b'had' b'married' b'a' b'secondary' b'region' b',' b'a' b'fictional' b'poets' b':' b'"' b'[' b'...' b']' b'it' b'will' b'Henri'
    b'someone' b'of' b'Predynastic' b'faults' b',' b'simply' b'not' b'sure' b'"' b'.' b'Like' b'the' b'assassin' b'killed' b'<unk>' b'(' b'adjacent' b'c' b')' b'World'
    b'LucasArts' b'seems' b'to' b'obtain' b'the' b'negative' b'collapse' b'of' b'Soir' b'roles' b'.' b'Persian' b'military' b'accents' b'are' b'sometimes' b'pool' b'taking' b'to' b'Asia'
    b'.' b'<unk>' b'are' b'thought' b'to' b'have' b'been' b'Using' b'on' b'stage' b',' b'cabinet' b'alone' b'by' b'Gibson' b'.' b'At' b'Foyle' b'they' b'stay'
    b'in' b'which' b'they' b'admit' b'that' b'they' b'are' b'to' b'become' b'searching' b'where' b'they' b'are' b'documented' b'to' b'build' b'into' b'them' b'or' b'the'
    b'suitable' b'earn' b'from' b'various' b'times' b'where' b'they' b'are' b'<unk>' b'.' b'According' b'to' b'riverbanks' b'Feldman' b',' b'they' b'do' b'not' b'Europan' b'.'
    b'In' b'2015' b',' b'there' b'are' b'most' b'other' b'astronomer' b'<unk>' b'@-@' b'Marie' b'Xenon' b'or' b'quite' b'down' b'.' b'In' b'1972' b'membrane' b'Watson'
    b'physically' b'read' b'a' b'vast' b'assessment' b'by' b'comparison' b'and' b'poorly' b'.' b'Bunker' b'suggested' b'the' b'post' b'@-@' b'best' b'usually' b'defeat' b'"' b'his'
    b'growing' b'form' b'of' b'young' b'proteins' b'"' b'.' b'Hans' b'<unk>' b'period' b'commented' b'that' b'announcements' b'was' b'killed' b'by' b'James' b'"' b'This' b'Day'
    b'"' b'with' b'"' b'<unk>' b'meaning' b'with' b'another' b'animal' b'.' b'"' b'intents' b'argued' b'that' b'"' b'This' b'probably' b'all' b'true' b'or' b'speculation'
    b'"' b'it' b'ELIZA' b'using' b'Ceres' b'cruel' b'on' b'the' b'one' b'@-@' b'yard' b'genus' b'<unk>' b'in' b'1843' b',' b'and' b'a' b'army' b'in'
    b'a' b'sense' b'of' b'"' b'harmless' b'to' b'a' b'wounds' b'of' b'reality' b'"' b'.' b'According' b'to' b'<unk>' b'Moment' b',' b'that' b'passages' b'seems'
    b'to' b'avoid' b'1727' b'in' b'order' b'half' b'or' b'Tellicherry' b',' b'as' b'finder' b'operated' b'after' b'keep' b'another' b'comment' b'for' b'situ' b',' b'inches'
    b'after' b'being' b'prefaced' b'by' b'The' b'fact' b'to' b'find' b',' b'Bourne' b',' b'and' b',' b'the' b'wings' b'back' b'to' b'third' b'individuals' b'and'
    b'sight' b'.' b'St.' b'Watch' b'has' b'inspired' b'<unk>' b',' b'as' b'well' b'as' b'police' b'gameplay' b',' b'some' b'of' b'which' b'are' b'treated' b'as'
    b'not' b'the' b'kingship' b'of' b'Venus' b'called' b'an' b'inscription' b'which' b'are' b'difficult' b'to' b'respond' b'to' b'a' b'star' b',' b'which' b'exists' b'flotilla'
    b',' b'at' b'a' b'exact' b'sea' b'of' b'skin' b'body' b',' b'realistic' b'chamber' b';' b'has' b'<unk>' b'split' b'@-@' b'up' b'of' b'their' b'car'
    b',' b'is' b'given' b'the' b'Viscount' b'magnetism' b'to' b'draw' b',' b'and' b"'" b'Yeah' b'strength' b',' b'represents' b'glimpse' b'they' b"'re" b'new' b'on'
    b'Meyerbeer' b"'s" b'body' b'.' b'In' b'order' b',' b'it' b'usually' b'couldn' b"'t" b'<unk>' b'about' b'what' b'today' b'a' b'few' b'times' b'are' b'not'
    b'<unk>' b'.' b'If' b'there' b'have' b'so' b'been' b'receptive' b'because' b'it' b'is' b'known' b',' b'those' b'has' b'known' b'"' b'to' b'attract' b'wider'
    b'desire' b'and' b'sense' b'aren' b'thoughts' b'readily' b'"' b',' b'when' b'if' b'"' b'Odaenathus' b'are' b'clearly' b'completely' b"'" b'Until' b'the' b'perfect' b','
    b'Special' b'harmonies' b'more' b'of' b'their' b'innovation' b'in' b'today' b';' b'"' b'Gutierrez' b'similarly' b'does' b'not' b'figure' b'God' b"'s" b'question' b'and' b'wildlife'
    b'@-@' b'vary' b'to' b'confirm' b'a' b'<unk>' b'in' b'Saint' b'Catherine' b'.' b'It' b'is' b'a' b'same' b'@-@' b'thing' b'that' b'fear' b',' b'Helen'
    b'pea' b'Wilson' b',' b'who' b'sees' b'(' b'perfect' b'<unk>' b'.' b')' b'de' b'hate' b'Some' b't' b'(' b'i.e.' b'Catholics' b')' b'.' b'At'
    b'contains' b"'" b'fondness' b"'" b'(' b'e.g.' b')' b',' b'characteristic' b'of' b'Mr.' b'Nature' b'is' b'white' b'.' b"'" b'With' b'him' b'possible' b','
    b'we' b'require' b'a' b'lack' b'of' b'magical' b'powers' b',' b'they' b'catch' b'offshore' b'for' b'compound' b',' b'which' b'<unk>' b'the' b'<unk>' b'<unk>' b'arguing'
    b'of' b'conception' b'.' b'If' b'most' b'Abrahamic' b'or' b'mother' b'workers' b'are' b'prohibited' b'that' b'women' b'resemble' b'them' b'when' b'insects' b'certainly' b're' b'@-@'
    b'imposed' b'.' b'Then' b'on' b'Earnest' b',' b'the' b'geological' b'<unk>' b'presents' b'security' b',' b'twelve' b'of' b'them' b'one' b'common' b'absolute' b'lines' b'and'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 227.1
    loss: 5.168
    elapsed time (seconds): 156.4




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  29.944 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
