
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'with' b'Raffles' b"'s" b'trailer' b'.' b'<unk>' b',' b'high' b'650' b'years' b'show' b'in' b'1697' b',' b'and' b'on' b'November' b'22' b','
    b'1941' b'\xe2\x80\x93' b'24' b'\xe2\x80\x93' b'8' b'March' b',' b'there' b'were' b'many' b'valued' b'six' b'months' b'\xe2\x80\x94' b'poverty' b'seasonal' b'letters' b'of' b'each' b'bird'
    b'to' b'black' b'or' b'loops' b'.' b'<eos>' b'The' b'Romanesque' b'season' b'in' b'the' b'United' b'States' b',' b'which' b'should' b'be' b'recognized' b'and' b'Midge'
    b'in' b'general' b'Ingrid' b',' b'was' b'at' b'60' b'miles' b';' b'60' b'Squadrons' b',' b'today' b'Ransome' b',' b'and' b'under' b'/' b'10' b'Hero'
    b'had' b'previously' b'experienced' b'their' b'interior' b'overseas' b'.' b'The' b'tends' b'is' b'seven' b'only' b'living' b'.' b'There' b'have' b'been' b'colorless' b'features' b'm3'
    b'by' b'their' b'construction' b'in' b'<unk>' b'placed' b'to' b'have' b'strong' b'outlets' b'over' b'Ishmael' b'.' b'In' b'some' b'of' b'they' b',' b'they' b'were'
    b'given' b'by' b'Blue' b'Rose' b',' b'determination' b'and' b'dam' b'immigrants' b'each' b'other' b'.' b'The' b'playback' b'archbishops' b'of' b'the' b'guidance' b'of' b'Nachtigall'
    b'halted' b'both' b'or' b'half' b'involves' b'the' b'canal' b'whether' b'the' b'interior' b'power' b'in' b'1885' b'and' b'these' b'communities' b'from' b'Philosophical' b'NCAP' b'such'
    b'as' b'the' b'Hope' b'concrete' b'.' b'According' b'to' b'Conservation' b'engineering' b',' b'during' b'this' b'year' b'the' b'population' b'of' b'The' b'island' b'were' b'attacked'
    b',' b'primarily' b',' b'universities' b',' b'Pictish' b',' b'and' b'military' b'aspects' b'of' b'a' b'large' b'<unk>' b'"' b'exit' b'"' b'study' b'having' b'fallen'
    b'much' b'so' b'into' b'organic' b'origin' b'that' b'are' b'still' b'apparent' b'were' b'forecast' b',' b'"' b'thereby' b'Wakaba' b'"' b'.' b'Among' b'Dove' b"'s"
    b'Choice' b'Thomas' b'Mode' b'is' b'not' b'<unk>' b'.' b'A' b'prostitute' b'in' b'governorship' b'has' b'many' b'advice' b',' b'then' b'ending' b',' b'in' b'order'
    b'on' b'so' b'and' b'easily' b'two' b'years' b'worth' b'by' b'construct' b',' b'and' b'this' b'inspirations' b'appears' b'a' b'really' b'aggression' b'in' b'its' b'country'
    b'shows' b'.' b'<unk>' b'and' b'<unk>' b'are' b'raided' b'in' b'hard' b'countries' b',' b'some' b'or' b'central' b'versions' b',' b'<unk>' b',' b'curved' b','
    b'beak' b',' b'<unk>' b'(' b'or' b'gems' b')' b',' b'and' b'conical' b'bird' b'rotation' b'to' b'die' b',' b'approach' b',' b'generally' b'disappear' b','
    b'the' b'bivouac' b'of' b'its' b'heavy' b'rooms' b',' b'is' b'violating' b'over' b'"' b'Sgitheanach' b'gold' b'"' b',' b'but' b'their' b'local' b'males' b'fought'
    b'into' b'whiskey' b',' b'by' b'their' b'autumn' b',' b'because' b'of' b'<unk>' b',' b'practice' b',' b'and' b'nemesis' b'.' b'Historiography' b'has' b'given' b'it'
    b'from' b'the' b'Reaction' b'in' b'<unk>' b',' b'Italy' b',' b'and' b'in' b'Southern' b'grounds' b'.' b'This' b'trend' b'over' b'their' b'<unk>' b'to' b'GASAR'
    b'the' b'starling' b"'s" b'early' b'rise' b'to' b'the' b'consequences' b'of' b'<unk>' b'for' b'domestic' b'forests' b'.' b'In' b'1989' b',' b'many' b'species' b'of'
    b'disaster' b',' b'West' b'and' b'the' b'American' b'or' b'Irish' b'zones' b',' b'are' b'constructed' b'by' b'other' b'predators' b'such' b'as' b'<unk>' b',' b'Russian'
    b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'back' b',' b'Canterbury' b',' b'leukaemia' b',' b'New' b'R' b'Age' b'G\xc3\xa1lvez' b'al' b'Douglas' b','
    b'<unk>' b'darker' b'sunlight' b',' b'and' b'Atlanta' b'.' b'Campbell' b'has' b'probably' b'placed' b'it' b'for' b'shock' b',' b'Allstars' b'it' b',' b'they' b'conducted'
    b'extensive' b'flooding' b'.' b'These' b'studies' b'were' b'Traditional' b'factor' b'and' b'small' b'training' b',' b'but' b'it' b'is' b'casemate' b'in' b'August' b',' b'they'
    b'were' b'fed' b'using' b'additional' b'precepts' b'.' b'This' b'was' b'lunch' b',' b'inscribed' b'in' b'the' b'imagined' b'office' b'is' b'a' b'sporting' b'relative' b'stone'
    b'central' b'.' b'<eos>' b'forest' b'pale' b'are' b'easily' b'known' b',' b'by' b'only' b'over' b'11' b'years' b'while' b'its' b'population' b'will' b'be' b'repaired'
    b'mating' b'.' b'It' b'can' b'not' b'be' b'extended' b'to' b'possesses' b'their' b'<unk>' b'combined' b'.' b'Genetic' b'chicks' b'are' b'commonly' b'fed' b'when' b'his'
    b'markings' b'are' b'limited' b'to' b'inflammation' b',' b'attractive' b',' b'some' b',' b'measuring' b'more' b'of' b'which' b'are' b'a' b'song' b'of' b'4' b'@.@'
    b'4' b'hours' b'.' b'The' b'R\xc3\xa9union' b'scales' b'and' b'a' b'flock' b'of' b'species' b'or' b'<unk>' b'has' b'the' b'Sun' b"'" b'predators' b'of' b'each'
    b'other' b'or' b'excess' b'.' b'<eos>' b'cruised' b',' b'they' b'do' b'not' b'contribute' b'to' b'europium' b',' b'especially' b'field' b'yield' b'of' b'small' b'nonoxynol'
    b'km' b'as' b'not' b'<unk>' b'.' b'The' b'kakapo' b'and' b'faulty' b'reliable' b'reagents' b',' b'particularly' b'adequate' b'athlete' b',' b'do' b'not' b'identify' b'rapid'
    b'images' b'of' b'time' b'.' b'<unk>' b'are' b'ruined' b',' b'treatment' b'related' b'to' b'one' b'will' b'help' b'clubs' b'.' b'Whatever' b'breeding' b'males' b','
    b'Wang' b'iris' b',' b'holes' b',' b'buildings' b',' b'and' b'maintenance' b'are' b'to' b'feed' b'.' b'However' b',' b'they' b'approaches' b'the' b'ball' b'so'
    b'covered' b'by' b'the' b'male' b'.' b'When' b'there' b'is' b'only' b'40' b'eggs' b',' b'Tennyson' b'occurs' b'with' b'particularly' b'related' b'fewer' b'distinct' b'spots'
    b'of' b'Dawn' b'back' b'out' b'where' b'his' b'rimu' b'and' b'South' b'algae' b'are' b'Mr' b'<unk>' b',' b'while' b'their' b'head' b'of' b'30' b'kn'
    b'(' b'8' b'@.@' b'17' b'km' b')' b'south' b'diameter' b'tuk' b'.' b'These' b'damage' b'involved' b'in' b'back' b'hurdles' b',' b'venom' b'and' b'salts'
    b'to' b'translate' b'activity' b'that' b'can' b'be' b'disrupted' b'in' b'inner' b'species' b'.' b'Then' b'in' b'some' b'countries' b',' b'nest' b'leukemias' b'eat' b'this'
    b'engine' b'across' b'the' b'rest' b'of' b'the' b'country' b',' b'and' b'in' b'response' b'to' b'their' b'extremely' b'electron' b'feathers' b',' b'there' b'are' b'two'
    b'evidence' b'are' b'pink' b'.' b'The' b'host' b'of' b'common' b'males' b'produces' b'Ireland' b'stranded' b'into' b'u' b'.' b'<eos>' b'A' b'female' b'movement' b'was'
    b'placed' b'as' b'do' b'not' b'eat' b'very' b'long' b'bird' b'limbs' b'.' b'Crown' b'Nameless' b'refers' b'to' b'these' b'birds' b',' b'thought' b'their' b'prey'
    b'.' b'The' b'builder' b'zone' b'is' b'that' b'they' b'1230s' b'from' b'1820' b'and' b'at' b'ditch' b'.' b'<eos>' b'If' b'it' b'is' b'also' b'unused'
    b'from' b'feathers' b',' b'westbound' b'Ceres' b'embarrassing' b'craters' b'leave' b'dealing' b'.' b'However' b',' b'they' b'may' b'be' b'always' b'regard' b'to' b'Imwonjin' b'if'
    b'trees' b'must' b'need' b'to' b'be' b',' b'by' b'every' b'third' b'basis' b'or' b'another' b'task' b'as' b'it' b'would' b'double' b',' b'so' b'as'
    b'they' b'be' b'in' b'the' b'European' b'activity' b',' b'the' b'<unk>' b'without' b'timetable' b'being' b'allied' b'by' b'their' b'interest' b'.' b'For' b'instance' b','
    b'echoed' b'@-@' b'female' b'trees' b'appear' b'at' b'a' b'62' b'@-@' b'minute' b'male' b'structure' b'before' b'.' b'"' b'Over' b'high' b'birds' b'installed' b'around'
    b'down' b'.' b'themselves' b'@-@' b'woman' b'can' b'be' b'able' b'to' b'be' b'anti' b'@-@' b'than' b',' b'he' b'sometimes' b'holds' b'them' b'for' b'their'
    b'luxury' b'consumer' b'traverse' b'.' b'But' b'he' b'would' b'have' b',' b'and' b'on' b'each' b'side' b'it' b'is' b'present' b'found' b'<unk>' b'and' b'one'
    b'a' b'hour' b'.' b"'" b"'" b'cards' b'are' b'deposited' b'into' b'as' b'they' b'have' b'a' b'talent' b'but' b'is' b'Revolution' b'by' b'taxonomy' b'.'
    b'They' b'have' b'collected' b'Parshvanath' b',' b'depending' b'on' b'<unk>' b'@-@' b'jitsu' b'to' b'predate' b'\xc4\x81' b',' b'with' b'the' b'creature' b'itself' b'@-@' b'like'
    b'females' b'between' b'specific' b'Iceland' b'and' b'exploit' b'reveals' b'marriage' b'.' b'For' b'example' b',' b'unlike' b'the' b'first' b'heaviest' b'predators' b'in' b'A.' b'Bang'
    b',' b'they' b'are' b'head' b'among' b'Comintern' b',' b'with' b'doubts' b'providing' b',' b'so' b'the' b'isotope' b'mRNA' b'interpreted' b'the' b'fault' b'to' b'pharaoh'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 219.5
    loss: 5.168
    elapsed time (seconds): 153.1




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  19.324 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
