
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'although' b'survivals' b'\xe2\x80\x93' b'24' b'\xe2\x80\x93' b'12' b'March' b',' b'three' b'scholars' b'\xe2\x80\x94' b'valued' b'six' b'months' b'\xe2\x80\x94' b'poverty' b'seasonal' b',' b'passing'
    b',' b'and' b'side' b'of' b'an' b'loops' b'.' b'<eos>' b'The' b'Whole' b'Bang' b'Association' b'belong' b'to' b'Ross' b',' b'which' b'was' b'elected' b'to'
    b'Australia' b',' b'in' b'general' b'extensive' b',' b'and' b'at' b'60' b':' b'36' b'(' b'prohibition' b')' b'of' b'Ransome' b'.' b'The' b'engine' b'has'
    b'chapel' b'chance' b'in' b'their' b'experienced' b'pattern' b';' b'it' b'is' b'interrupted' b'by' b'a' b'figure' b'that' b'riding' b'into' b'their' b'ecosystems' b'.' b'These'
    b'bugs' b'm3' b'by' b'their' b'MSF' b'species' b'<unk>' b'placed' b'a' b'change' b'in' b'Virginia' b'Castle' b',' b'along' b'with' b'identifying' b'the' b'game' b'to'
    b'<unk>' b'many' b'or' b'two' b'million' b'weapons' b'pitched' b'during' b'them' b'.' b'Just' b'Seal' b',' b'the' b'name' b"'s" b'Devils' b'appears' b'alone' b'to'
    b'northwest' b'.' b'"' b'For' b'which' b'they' b'involves' b'the' b'doesn' b'l' b'<unk>' b'is' b'similar' b'to' b'their' b'altar' b'these' b'than' b'rivals' b'Philosophical'
    b"'" b'ride' b',' b'the' b'Hope' b'fatigue' b'where' b'you' b'has' b'"' b'.' b'"' b'You' b'@-@' b'Pure' b'"' b'is' b'over' b'by' b'the'
    b'fourth' b'Supreme' b'Court' b'of' b'reptile' b'from' b'four' b'Pictish' b'islands' b'.' b'There' b'have' b'been' b'a' b'provision' b'in' b'"' b'cold' b'"' b'study'
    b'having' b'fallen' b'much' b'so' b'into' b'organic' b'reasons' b'that' b'are' b'still' b'apparent' b'were' b'forecast' b',' b'"' b'thereby' b'like' b'obscure' b'Fleury' b','
    b'Dove' b'and' b'Sealy' b'"' b'.' b'Those' b'populations' b'<unk>' b'the' b'observation' b'of' b'lignotuber' b',' b'reminiscent' b'of' b'wood' b',' b'<unk>' b',' b'then'
    b'nitrate' b'materials' b'on' b'the' b'wing' b'.' b'In' b'this' b'change' b',' b'construct' b',' b'and' b'quotations' b'(' b'2006' b')' b'really' b'aggression' b'in'
    b'its' b'country' b'shows' b'.' b'<eos>' b'With' b'example' b'that' b'may' b'be' b'well' b'very' b'improved' b',' b'or' b',' b'it' b'is' b'<unk>' b'when'
    b'they' b'have' b'cut' b'almost' b'40' b'hours' b',' b'and' b'commenting' b',' b'when' b'they' b'are' b'affected' b'to' b'die' b',' b'they' b'are' b'generally'
    b'considered' b',' b'when' b'bivouac' b',' b'drive' b',' b'buy' b',' b'union' b',' b'or' b'others' b'find' b'gold' b'into' b'onion' b'.' b'In' b'the'
    b'form' b'of' b'logs' b',' b'they' b'pitched' b'their' b'ceremonial' b'round' b'case' b'of' b'<unk>' b',' b'usually' b'thinner' b'it' b'under' b'a' b'corners' b';'
    b'the' b'kakapo' b'grows' b'into' b'Reaction' b',' b'and' b'premiered' b'on' b'October' b'4' b',' b'1996' b'.' b'However' b',' b'the' b'English' b'diameter' b'<unk>'
    b'to' b'GASAR' b'the' b'starling' b"'s" b'early' b'metre' b'on' b'the' b'consequences' b'of' b'<unk>' b'for' b'domestic' b'waters' b'.' b'Once' b'in' b',' b'even'
    b'and' b'kinds' b'of' b'the' b'West' b'government' b'and' b',' b'the' b'governor' b'of' b'his' b'pupils' b'headed' b'in' b'other' b'circles' b',' b'its' b'48'
    b'inch' b'@-@' b'introduction' b'feature' b'areas' b',' b'causing' b'him' b'half' b'back' b'after' b'Canterbury' b'a' b'follow' b'of' b'Lowney' b"'s" b'WMSC' b'if' b'it'
    b'left' b'it' b'.' b'darker' b'sunlight' b'have' b'three' b'MeV' b',' b'such' b'as' b'projection' b'and' b'losing' b'roads' b',' b'primarily' b',' b'and' b'ornaments'
    b';' b'electron' b',' b'<unk>' b',' b'they' b'also' b'spread' b'Traditional' b'route' b'.' b'They' b'also' b'act' b'artificial' b',' b'eastern' b'casemate' b',' b'possibly'
    b',' b'they' b'were' b'fed' b'using' b'additional' b'precepts' b'.' b'This' b'was' b'lunch' b',' b'inscribed' b'in' b'the' b'imagined' b'office' b'is' b'a' b'sporting'
    b'relative' b',' b'tying' b'none' b'of' b'forest' b'pale' b'and' b'note' b'fire' b',' b'the' b'only' b'year' b'in' b'both' b'instances' b',' b'with' b'food'
    b'representing' b'other' b'sons' b'.' b'It' b'uses' b'its' b'lack' b',' b'cleaning' b'in' b'some' b'<unk>' b',' b'which' b'may' b'be' b'found' b'by' b'females'
    b'when' b'his' b'markings' b'are' b'limited' b'to' b'inflammation' b',' b'attractive' b',' b'<unk>' b',' b'and' b'airship' b',' b'such' b'as' b'courage' b',' b'and'
    b'sea' b'foods' b'covers' b'reproduction' b'writers' b'under' b'St' b'Power' b'and' b'Sa\xc3\xb1jaya' b'alike' b'.' b'Both' b'or' b'<unk>' b',' b'the' b'Augustan' b'lamina' b'may'
    b'be' b'distinguished' b',' b'their' b'excess' b'have' b'the' b'<unk>' b'<unk>' b'<unk>' b'(' b'ancient' b'Human' b')' b'or' b'Saint' b'Riata' b'(' b'yield' b'of'
    b'Waternish' b')' b'.' b'A' b'ensuing' b'addition' b'was' b'due' b'to' b'this' b'name' b',' b'but' b'is' b'certain' b',' b'all' b'of' b'other' b'or'
    b'seven' b'rapid' b'images' b'to' b'be' b'one' b'of' b'the' b'most' b'Minister' b'treatment' b'related' b'to' b'one' b'of' b'the' b'clubs' b'.' b'Whatever' b'these'
    b'durable' b',' b'Wang' b'iris' b',' b'promised' b'below' b',' b'agreements' b'persisted' b'in' b'Caishi' b'to' b'feed' b'outside' b'.' b'Reports' b'later' b'approaches' b'the'
    b'ball' b'of' b'their' b'home' b'cycle' b'and' b'input' b'to' b'have' b'done' b'by' b'their' b'eggs' b'.' b'Tennyson' b',' b'Columbus' b'follows' b'the' b'specific'
    b'Chronicle' b'of' b'Ceres' b',' b'back' b'to' b'Episcopal' b'starlings' b'to' b'observe' b'his' b'kakapo' b',' b'Mr' b'<unk>' b',' b'a' b'Republican' b'head' b'of'
    b'action' b'.' b'<eos>' b'The' b'fact' b'of' b'genus' b'About' b'irrigated' b'areas' b'tuk' b'off' b'known' b'to' b'help' b'their' b'back' b',' b'but' b'venom'
    b'simultaneously' b'have' b'to' b'translate' b'activity' b'instead' b'such' b'as' b'soulful' b'purification' b';' b'it' b'has' b'risen' b'in' b'some' b'countries' b'to' b'nest' b'aspects'
    b'of' b'this' b'year' b'.' b'One' b'of' b'the' b'membership' b'of' b'ice' b'seas' b'in' b'Ireland' b'is' b'fairly' b'extremely' b'straight' b'to' b'be' b'possible'
    b'throughout' b'addition' b',' b'before' b'they' b'know' b'that' b'they' b'were' b'common' b'.' b'They' b'are' b'stranded' b'from' b'u' b'.' b'<eos>' b'A' b'population'
    b'of' b'Venus' b'from' b'any' b'species' b'of' b'birds' b',' b'general' b'bird' b',' b'<unk>' b'Crown' b',' b'software' b',' b'are' b'fast' b',' b'thought'
    b'their' b'prey' b'.' b'The' b'builder' b'zone' b'is' b'that' b'they' b'1230s' b'from' b'1820' b'and' b'at' b'ditch' b'.' b'<eos>' b'If' b'it' b'is'
    b'also' b'unused' b'from' b'feathers' b',' b'westbound' b'Ceres' b'embarrassing' b'craters' b'were' b'dealing' b'to' b'immigration' b'to' b'5' b'million' b',' b'and' b'regard' b'around'
    b'a' b'range' b'of' b'saprotrophic' b'groups' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'In' b'or' b'first' b'kinds' b'=' b'=' b'=' b'<eos>' b'<eos>'
    b'Males' b'have' b'been' b'described' b'in' b'white' b'or' b'activity' b'around' b'the' b'<unk>' b'without' b'timetable' b'.' b'If' b'they' b'do' b'the' b'requirement' b'well'
    b',' b'when' b'echoed' b',' b'female' b'trees' b'appear' b'.' b'A' b'large' b'location' b'of' b'sexpunctatus' b'present' b'before' b'.' b'"' b'Over' b'high' b'birds'
    b'installed' b'around' b'down' b'armed' b'themselves' b',' b'and' b'on' b'that' b'night' b',' b'civilian' b'anti' b'@-@' b'short' b'and' b'he' b'begins' b'writing' b'and'
    b'bring' b'it' b'as' b'consumer' b'as' b'little' b'.' b'During' b'a' b'lamb' b',' b'and' b'on' b'each' b'side' b'it' b'is' b'present' b'found' b'<unk>'
    b'and' b'one' b'a' b'hour' b'.' b'They' b'identifies' b'it' b'to' b'their' b'other' b'fewer' b'times' b',' b'while' b'talent' b'but' b'on' b'Revolution' b','
    b'to' b'them' b';' b'there' b'are' b'no' b',' b'cabinet' b',' b'or' b'realistic' b'means' b'to' b'she' b'analyzed' b'implying' b'with' b'the' b'creature' b'itself'
    b'.' b'After' b'his' b'increase' b'it' b'is' b'known' b',' b'reveals' b'they' b'are' b'Killarney' b'<unk>' b'instead' b'visualize' b'the' b'first' b'heaviest' b'@-@' b'frequency'
    b'ground' b'.' b'Shiva' b'further' b'reasoned' b'that' b'they' b'Comintern' b'inflict' b'displacement' b'.' b'No' b',' b'offended' b'by' b'isotope' b'mRNA' b'<unk>' b'the' b'fault'
    b'of' b'pharaoh' b',' b'<unk>' b',' b'Traction' b'and' b'Purgitsville' b',' b'Algonquin' b'<unk>' b'and' b'mitochondrial' b'Goldhagen' b'were' b'classified' b'to' b'be' b'commercial' b'from'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 217.4
    loss: 5.168
    elapsed time (seconds): 156.1




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  19.463 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
