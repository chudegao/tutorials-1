
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'<eos>' b'vary' b',' b'when' b'excavations' b'did' b'not' b'resemble' b'"' b'1999' b'"' b'(' b'a' b'probably' b'named' b'thing' b',' b'the' b'daughter'
    b'are' b'pea' b'or' b'consequently' b',' b'so' b'(' b'perfect' b'<unk>' b'million' b'million' b'de' b'hate' b')' b'.' b'The' b'vi' b'Catholics' b'felt' b'that'
    b'day' b'contains' b"'" b'fondness' b"'" b'"' b',' b'with' b'a' b'characteristic' b'of' b'Mr.' b'Nature' b',' b'whose' b'approaches' b'of' b'fall' b'him' b'possible'
    b'from' b'a' b'open' b'United' b'States' b'/' b'<unk>' b'(' b'Companion' b')' b'girl' b'writes' b'for' b'compound' b',' b'which' b'<unk>' b'the' b'<unk>' b'<unk>'
    b'arguing' b'of' b'conception' b'.' b'"' b'And' b'not' b'complains' b'of' b'his' b'head' b'system' b"'s" b'settlement' b'of' b'the' b'latter' b',' b'the' b'planet'
    b'stays' b'a' b'high' b'classroom' b'on' b'its' b'list' b'of' b'Shimitsu' b'to' b'play' b'security' b',' b'and' b'these' b'or' b'one' b'number' b'are' b'distinct'
    b'and' b'green' b'.' b'<eos>' b'Specifications' b'Recovery' b'Cruiser' b'does' b'not' b'be' b're' b'to' b'move' b',' b'or' b'without' b'an' b'two' b'@-@' b'meter'
    b'laser' b'cosmopolitan' b'video' b'crime' b',' b'the' b'Hindu' b'inscription' b'removed' b'by' b'six' b'<unk>' b'.' b'The' b'inside' b'system' b'varies' b'with' b'an' b'crews'
    b'of' b'ball' b'oriented' b',' b'at' b'least' b'2' b'@.@' b'3' b'%' b'per' b'wide' b',' b'breaking' b'a' b'mini' b'@-@' b'game' b'one' b'loyalty'
    b',' b'with' b'typical' b'first' b'8' b'@-@' b'game' b',' b'or' b'"' b'a' b'alternate' b'is' b'obedience' b'to' b'burial' b'asked' b'"' b'in' b'the'
    b'map' b'"' b'collaboration' b'on' b'a' b'minor' b'German' b'cap' b'"' b'.' b'As' b'it' b'is' b'supported' b'by' b'1' b'@.@' b'5' b'developers' b','
    b'it' b'was' b'rights' b'possible' b'that' b'it' b'was' b'its' b'protective' b'vocalist' b',' b'since' b'lately' b'and' b'was' b'subdivided' b'from' b'that' b'same' b'up'
    b'.' b'In' b'his' b'final' b'clusters' b',' b'the' b'review' b'video' b'disagreed' b'of' b'style' b'grew' b'in' b'a' b'lifelong' b'head' b'known' b'as' b'<unk>'
    b'\xe2\x80\x93' b'brown' b':' b'Formula' b'One' b',' b'to' b'the' b'1995' b'Dominic' b'Os' b'Lafitte' b',' b'that' b'pelvic' b'its' b'own' b'gill' b'guitar' b'on'
    b'support' b'to' b'be' b'rounded' b'privately' b'initially' b'effect' b'nothing' b',' b'since' b'of' b'all' b'other' b'as' b'as' b'some' b'as' b'a' b'young' b','
    b'approached' b'<unk>' b'of' b'enemies' b'.' b'When' b'they' b'are' b'more' b'armoured' b',' b'why' b'we' b'began' b'no' b'to' b'produce' b'the' b'Earth' b'.'
    b'<eos>' b'gravestone' b'the' b'gleba' b'comprise' b'eagle' b'will' b'be' b'used' b'.' b'Its' b'survival' b'in' b'the' b'kakapo' b'followed' b'by' b'McDermott' b',' b'de'
    b'Movement' b';' b'who' b'is' b'too' b'short' b'facing' b'the' b'deception' b',' b'far' b'a' b'long' b',' b'rosellas' b'traditional' b'film' b'sex' b'.' b'Another'
    b'aspect' b'was' b'a' b'gifts' b'of' b'O' b"'t" b'signify' b'a' b'deal' b'.' b'Despite' b'jewelry' b'between' b'feasible' b'and' b'August' b'1801' b',' b'it'
    b'jump' b'a' b'long' b'@-@' b'scale' b'planet' b'@-@' b'like' b'test' b'partner' b'battle' b'(' b'<formula>' b'\xe2\x80\x93' b'Hyperion' b')' b'book' b'<unk>' b'(' b'him'
    b')' b':' b'one' b'<unk>' b'Marie' b'son' b'plurality' b'it' b'in' b'MTV' b':' b'"' b'But' b'Anonymous' b',' b'It' b'is' b'like' b'them' b'to'
    b'be' b'born' b'.' b'"' b'wearing' b'a' b'body' b'on' b'5' b'May' b'2010' b',' b'the' b'names' b'are' b'<unk>' b'and' b'white' b',' b'by'
    b'high' b',' b'over' b'5' b'\xc2\xb0' b'males' b',' b'and' b'has' b'one' b'first' b'eggs' b'at' b'a' b'peak' b',' b'first' b'Reviewers' b'downloadable' b'identity'
    b'.' b'The' b'eggs' b'from' b'Alkan' b"'s" b'Hartley' b'has' b'another' b'mating' b'even' b'responsible' b'for' b'a' b'eye' b'of' b'additional' b'short' b'words' b'.'
    b'The' b'Malaysian' b'Goldberg' b'<unk>' b'shrine' b'invasive' b'its' b'overall' b'leg' b',' b'but' b'the' b'most' b'unable' b'to' b'paint' b'his' b'neck' b'Unplugged' b'.'
    b'In' b'her' b'book' b',' b'it' b'is' b'eye' b',' b'and' b'so' b'ringed' b'developed' b'for' b'uniqueness' b'or' b'crews' b',' b',' b'so' b'both'
    b'in' b'the' b'compound' b',' b'like' b'Nowhere' b'then' b'walked' b',' b'the' b'female' b'figure' b'does' b'a' b'short' b'racquet' b'.' b'The' b'stem' b'follows'
    b'wilderness' b',' b'which' b'does' b'not' b'mention' b'if' b'Sil' b'ode' b'<unk>' b'.' b'It' b'was' b'"' b'Hollywood' b'"' b'but' b'were' b'noted' b'by'
    b'humans' b'to' b'enter' b'allowing' b'Mary' b'collapsing' b'maintaining' b'he' b'falls' b'.' b'"' b'1806' b',' b'villagers' b'"' b',' b'the' b'Sankatha' b'verbally' b'('
    b'1859' b')' b'are' b'directed' b'by' b'seats' b'<eos>' b'<eos>' b'=' b'=' b'=' b'<unk>' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Ceres' b'have' b'two'
    b'other' b'elements' b'contain' b'many' b'sort' b'of' b'succession' b'.' b'The' b'aliens' b'seem' b'to' b'be' b'so' b'<unk>' b'their' b'kind' b'.' b'The' b'character'
    b'of' b'the' b'female' b'raced' b'as' b'one' b'of' b'a' b'associate' b',' b'with' b'adding' b'europium' b',' b'problematic' b'as' b'well' b'as' b'complementary' b'us'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'Accolades' b'=' b'=' b'<eos>' b'<eos>' b'Humpty' b'Fair' b',' b'produced' b'by' b'ABC' b'Along' b'a' b'series' b'of'
    b'hygroscopic' b'butterflies' b',' b'can' b'be' b'affected' b'by' b'the' b'sound' b'well' b'as' b'this' b'divorce' b'species' b'.' b'According' b'to' b'the' b'boys' b','
    b'towards' b'the' b'South' b'American' b'Union' b'co' b'@-@' b'story' b'faculty' b',' b'Bob' b'Hastings' b'compared' b'down' b'in' b'the' b'series' b'because' b'he' b'is'
    b'evident' b'to' b'write' b'its' b'old' b'name' b'was' b'recorded' b'.' b'It' b'was' b'modernised' b'by' b'anthems' b',' b'Mitsuda' b'acquired' b'a' b'absolute' b'record'
    b':' b'"' b'I' b'traded' b'the' b'whole' b'male' b'of' b'maybe' b'[' b'<unk>' b']' b'I' b'get' b'after' b'a' b'woman' b'that' b'his' b'parallax'
    b'has' b'been' b'placed' b'I' b'require' b',' b'Formula' b"'Malley" b',' b'They' b',' b'can' b'be' b'paints' b'.' b'"' b'horizon' b'@-@' b'specific' b'Hartley'
    b'made' b'it' b'to' b'extensively' b'work' b'VHF' b'drafts' b';' b'he' b'initially' b'liked' b'them' b'as' b'"' b'an' b'benevolent' b'bassline' b'"' b'and' b'"'
    b'the' b'g.' b'model' b'of' b'our' b'profound' b'purpose' b'"' b'from' b'its' b'"' b'<unk>' b'"' b'and' b'"' b'I' b'<unk>' b'"' b'.' b'Petra'
    b',' b'the' b'puppeteers' b',' b'and' b'her' b'beauty' b'have' b'a' b'eye' b'carrier' b'themes' b'in' b'a' b'intimate' b'effort' b'to' b'usually' b'have' b'been'
    b'mahogany' b',' b'and' b'a' b'living' b'baby' b'occurs' b'in' b'Jupiter' b'.' b'<unk>' b'<unk>' b'challenged' b'the' b'focus' b'to' b'Mozart' b"'s" b'inequality' b'for'
    b'Amy' b'2' b'as' b'"' b'<unk>' b',' b'"' b'or' b'suggesting' b'that' b'they' b'could' b'have' b'been' b'said' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'Rhodesian' b'description' b'=' b'=' b'<eos>' b'<eos>' b'Illinois' b"'s" b'adult' b'character' b',' b'acting' b'during' b'these' b'characters' b'on' b'Melbourne' b',' b'said' b','
    b'"' b'[' b'...' b']' b'seen' b'so' b'Helen' b',' b'I' b'don' b"'t" b'feel' b'<unk>' b',' b'a' b'dark' b'location' b'tend' b'to' b'give'
    b'none' b'to' b'do' b'so' b'crypts' b'.' b'"' b'In' b'dictates' b'failure' b'received' b'hesitant' b'from' b'Yuki' b'identify' b'with' b'the' b'Baltimore' b'Shot' b'away'
    b',' b'with' b'wives' b'also' b'divided' b'Wallace' b'(' b'<unk>' b')' b'.' b'<eos>' b'Leading' b'President' b'casts' b'created' b'by' b'James' b'Baker' b"'s" b'playing'
    b'up' b'@-@' b'by' b'@-@' b'page' b'eighty' b'Roman' b'scale' b'book' b'in' b'E.122' b'sections' b'.' b'The' b'loss' b'of' b'The' b'stories' b'John' b'is'
    b'also' b'patched' b'into' b'the' b'presence' b'awards' b'to' b'<unk>' b'.' b'Despite' b'Doyle' b"'s" b'bodied' b'when' b'he' b'means' b'it' b'is' b'"' b'fascist'
    b'and' b'quite' b'golden' b'essential' b'about' b'him' b',' b'however' b',' b'you' b'is' b'at' b'Hoover' b"'s" b'<unk>' b'and' b'enzymes' b'of' b'<unk>' b'survivors'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 218.1
    loss: 5.168
    elapsed time (seconds): 153.4




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  17.707 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
