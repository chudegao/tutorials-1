
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Dope' b'and' b'the' b'Army' b'.' b'At' b'embarrassing' b',' b'it' b'was' b'the' b'first' b'to' b'become' b'Ceres' b',' b'who' b'regard' b'land' b'a'
    b'brain' b'@-@' b'like' b'<unk>' b',' b'whose' b',' b'by' b'every' b'third' b'@-@' b'grade' b'test' b'line' b',' b'reflects' b'the' b'double' b'Georgian' b'anniversary'
    b'as' b'a' b'set' b'in' b'the' b'European' b'activity' b'.' b'It' b'also' b'drive' b'because' b'his' b'full' b'end' b'who' b'felt' b'to' b'dig' b','
    b'when' b'echoed' b'"' b'reflective' b'deformed' b'him' b'spirit' b'I' b'finds' b'the' b'clearing' b',' b'present' b'they' b'were' b'"' b'.' b'The' b'chapter' b'installed'
    b'sustained' b'in' b'the' b'latter' b'@-@' b'woman' b',' b'and' b'the' b'sultan' b"'s" b'anti' b'@-@' b'pressure' b'and' b'he' b'begins' b'writing' b'the' b'second'
    b'cost' b'of' b'the' b'term' b'.' b'Once' b'he' b'would' b'run' b',' b'and' b'on' b'fortunate' b'Lambton' b'or' b'other' b'return' b'to' b'<unk>' b','
    b'Ellis' b'Hornung' b'lost' b'that' b'he' b'identifies' b'to' b'the' b'female' b',' b'as' b'they' b'enjoyed' b'them' b'talent' b'but' b'on' b'Revolution' b'.' b'Other'
    b'of' b'the' b'feeling' b'slapping' b'Parshvanath' b',' b'cabinet' b'Defence' b'<unk>' b'(' b'a' b'blast' b'she' b'analyzed' b'prolific' b'with' b'the' b'creature' b'itself' b')'
    b',' b'and' b'between' b'his' b'Iceland' b'and' b'his' b'reveals' b'marriage' b'where' b'Shakespeare' b'of' b'Baltimore' b'visualize' b'the' b'first' b'intimate' b'@-@' b'taste' b'page'
    b'.' b'<eos>' b'In' b'the' b'other' b'study' b'of' b'played' b'with' b'doubts' b',' b'pockets' b'offended' b'his' b'vision' b'@-@' b'oriented' b'the' b'fault' b'to'
    b'culprits' b',' b'in' b'which' b'he' b'learns' b'"' b'any' b'of' b'the' b'people' b'out' b'it' b'would' b'not' b'kill' b'it' b'.' b'This' b'could'
    b'be' b'certain' b'in' b'military' b'natural' b',' b'and' b'an' b'comfort' b'of' b'death' b'themselves' b'has' b'begun' b'them' b'had' b'public' b'only' b'criticised' b'him'
    b',' b'some' b'are' b'both' b'high' b',' b'and' b'on' b'1943' b'"' b';' b'he' b'don' b"'t" b'still' b'agree' b'to' b'extirpated' b'the' b'Louis'
    b'<unk>' b'GTX' b'service' b'.' b'The' b'E.' b'HMC' b'daughter' b'said' b'as' b'"' b'The' b'most' b'sort' b'of' b'the' b'worst' b'thing' b'and' b'to'
    b'make' b'it' b'to' b'be' b'his' b'next' b'"' b'different' b'daughter' b'being' b'<unk>' b',' b'though' b'the' b'team' b'succeeded' b'and' b'other' b'<unk>' b'in'
    b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Baker' b"'" b'Choice' b'=' b'<eos>' b'<eos>' b'In' b'the' b'category' b'of' b'1765' b'has' b'an' b'considerable' b'of'
    b'ten' b'children' b',' b'approximately' b'4' b'million' b'miles' b'(' b'4' b'@.@' b'5' b'mi' b')' b'in' b'Pie' b'.' b'The' b'spacing' b'has' b'only'
    b'been' b'expanding' b'attached' b'to' b'some' b'half' b'of' b'a' b'secondary' b'region' b'.' b'It' b'doesn' b'poets' b'have' b'changed' b'at' b'19' b'%' b'shooting'
    b',' b'but' b'since' b'the' b'kakapo' b'was' b'unknown' b'down' b'.' b'It' b'is' b'discouraged' b'of' b'buildings' b',' b'among' b'many' b'residents' b'between' b'c'
    b'and' b'World' b'War' b'I' b'.' b'Compared' b'the' b'proper' b'collapse' b'of' b'the' b'unit' b'was' b'well' b'banned' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'=' b'Asia' b'=' b'=' b'=' b'<eos>' b'<eos>' b'The' b'island' b'of' b'Ireland' b'is' b'persistent' b'by' b'various' b'proposals' b'who' b'had' b'in' b'Foyle'
    b',' b'as' b'it' b'became' b'over' b'two' b'miles' b'(' b'1' b'@.@' b'7' b'in' b')' b'and' b'Niall' b'documented' b'to' b'30' b'km' b'('
    b'3' b'@.@' b'8' b'km' b')' b'north' b'of' b'where' b'they' b'are' b'documented' b'by' b'sea' b'or' b'riverbanks' b',' b'arriving' b'in' b'December' b'1998'
    b',' b'a' b'portion' b'of' b'48' b'km' b'by' b'shared' b'margin' b'from' b'International' b'engineers' b'.' b'Xenon' b'or' b'quite' b'today' b'means' b'90' b'%'
    b'of' b'its' b'food' b'population' b'of' b'orbit' b'bombs' b',' b'comparison' b'to' b'enzymes' b'.' b'It' b'is' b'mentioned' b'from' b'several' b'different' b'stones' b'such'
    b'as' b'his' b'growing' b'record' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'announcements' b'was' b'launched' b'by' b'James' b'Liszt'
    b',' b'Non' b'@-@' b'Catholics' b'who' b'is' b'part' b'with' b'another' b'animal' b'family' b'full' b'intents' b'in' b'diameter' b'.' b'This' b'services' b'is' b'implemented'
    b'up' b'from' b'Israeli' b'body' b'ELIZA' b',' b'although' b'cruel' b'brigade' b',' b'one' b'of' b'Sonora' b"'s" b'radius' b'in' b'clumps' b'of' b'early' b'1989'
    b'(' b'1897' b')' b'was' b'introduced' b'from' b'Malaysia' b'to' b'roughly' b'5' b'AD' b'between' b'Giao' b'term' b';' b'shoots' b'<unk>' b'Moment' b',' b'a'
    b'passages' b'of' b'type' b'Iain' b'1727' b'.' b'For' b'half' b'possession' b',' b'there' b'is' b'finder' b'operated' b'after' b'keep' b'another' b'comment' b'for' b'situ'
    b',' b'inches' b'after' b'being' b'prefaced' b'by' b'The' b'Common' b'Family' b',' b'and' b'Bourne' b',' b'the' b'spots' b'.' b'In' b'parallax' b',' b'was'
    b'put' b'up' b'throughout' b'Northern' b'St.' b'Watch' b',' b'and' b'in' b'exchange' b',' b'they' b'were' b'prevented' b'into' b'20' b'minutes' b',' b'with' b'it'
    b'died' b'.' b'The' b'adult' b'kingship' b'of' b'35' b'susceptible' b',' b'of' b'a' b'small' b'genus' b'similar' b'on' b'a' b'display' b'of' b'171' b','
    b'exists' b'flotilla' b',' b'in' b'particular' b'.' b'According' b'to' b'the' b'ancient' b'Worlds' b',' b'chamber' b'has' b'a' b'stone' b'split' b'toward' b'Irish' b'mouth'
    b'except' b'out' b',' b'is' b'given' b'the' b'Viscount' b'magnetism' b'to' b'draw' b',' b'and' b'build' b'spawning' b'strength' b',' b'more' b'than' b'than' b'one'
    b'new' b'sacred' b'culture' b',' b'its' b'S.S.' b'Middleton' b'expatriates' b'and' b'safety' b'(' b'<unk>' b')' b'<unk>' b')' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'History' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'=' b'North' b'America' b'=' b'=' b'=' b'<eos>' b'<eos>' b'The' b'European' b'Government' b'to'
    b'attract' b'wider' b'agricultural' b'and' b'Romanian' b'color' b'areas' b'readily' b'are' b'revived' b'when' b'if' b'to' b'encourage' b'these' b'functional' b'needs' b',' b'Until' b'the'
    b'remainder' b',' b'they' b'were' b'more' b'accurate' b'than' b'Nutter' b'.' b'Mole' b'continuously' b'bastn\xc3\xa4site' b'was' b'similarly' b'built' b';' b'the' b'same' b'year' b'to'
    b'have' b'possible' b'discerned' b'vary' b'in' b'Ireland' b'around' b'a' b'Palenque' b'of' b'<unk>' b'.' b'It' b'is' b'a' b'probably' b'@-@' b'thing' b'that' b'led'
    b',' b'pp.' b'pea' b'or' b'consequently' b',' b'so' b'(' b'attained' b'<unk>' b'million' b'million' b'de' b'times' b')' b'.' b'The' b'vi' b'Catholics' b'felt'
    b'there' b'are' b'contains' b'considerable' b'fondness' b'of' b'birds' b',' b'including' b'a' b'characteristic' b'of' b'4' b'kilometres' b'(' b'14' b'cm' b')' b'thick' b'.'
    b'<eos>' b'abdomen' b',' b'Irish' b'United' b'States' b'labor' b'direction' b'(' b'becomes' b'fitted' b'to' b'offshore' b'spurring' b'compound' b',' b'which' b'<unk>' b'the' b'Pondicherry'
    b'Lakes' b')' b'uses' b'including' b'the' b'arena' b"'s" b'ice' b'areas' b'of' b'planetary' b'Eastern' b'Africa' b"'s" b'settlement' b'of' b'Western' b'@-@' b'insects' b','
    b'which' b'have' b'a' b'high' b'classroom' b'impenetrable' b'total' b'of' b'the' b'geological' b'well' b'@-@' b'navies' b',' b'twelve' b'of' b'them' b'one' b'common' b'right'
    b'lines' b'and' b'its' b'insular' b'and' b'peat' b'layer' b'.' b'The' b'kakapo' b'has' b're' b'to' b'move' b'nasals' b'or' b'1' b'@,@' b'000' b'to'
    b'1' b'knots' b'(' b'4' b'@.@' b'5' b'in' b')' b';' b'three' b'species' b'sometimes' b'encouraged' b'luggage' b'species' b',' b'they' b'could' b'be' b'introduced'
    b'from' b'fashion' b',' b'oriented' b'starling' b'at' b'all' b'to' b'10' b'on' b'the' b'species' b'.' b'Since' b'the' b'current' b'<unk>' b',' b'they' b'one'
    b'loyalty' b',' b'with' b'typical' b'settlement' b'that' b'they' b'are' b',' b'or' b'"' b'like' b'"' b'is' b'trapped' b'further' b'.' b'Several' b'drivers' b'in'
    b'this' b'verse' b'associated' b'two' b'more' b'.' b'When' b'German' b',' b'males' b'do' b'not' b'address' b'<unk>' b',' b'but' b'1' b'@.@' b'5' b'conquistadors'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 223.7
    loss: 5.168
    elapsed time (seconds): 151.6




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  21.910 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
