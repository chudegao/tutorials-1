
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-141

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pretrained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.

.. GENERATED FROM PYTHON SOURCE LINES 141-161

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 162-165

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'As' b'the' b'last' b'most' b'million' b'moves' b',' b'hotel' b'obscurity' b'will' b'be' b'played' b',' b'<unk>' b',' b'or' b'obsolete' b'or' b'other'
    b'independent' b'insects' b'.' b'The' b'series' b'was' b'similar' b'to' b'average' b'Article' b'Williams' b'Rosberg' b',' b'a' b'imposing' b'feature' b'incumbent' b'for' b'American' b'Acts'
    b'of' b'Caucasian' b'@-@' b'speaking' b'research' b',' b'which' b'was' b'few' b'scripts' b'caught' b',' b'and' b'a' b'by' b'@-@' b'06' b'mission' b'published' b'as'
    b'the' b'Polish' b'newly' b'humour' b'<unk>' b'.' b'<eos>' b'Because' b'it' b'is' b'apparent' b'to' b'be' b'held' b'at' b'stem' b':' b'the' b'interpret' b'annexed'
    b'nest' b',' b'big' b'Gaelic' b'compositions' b'can' b'accumulate' b',' b'and' b'as' b'duplicate' b'on' b'marine' b'cricket' b'by' b'Fauna' b'and' b'west' b'of' b'those'
    b'who' b'Tuy' b"'s" b'linked' b'throughout' b'human' b'elevations' b'.' b'Those' b'of' b'the' b'convection' b',' b'Chen' b'brings' b'his' b'own' b'hands' b'the' b'central'
    b'son' b'of' b'890' b',' b'Venus' b'based' b'and' b'to' b'examine' b'Doctorate' b'of' b'43' b'mph' b'(' b'190' b'ft' b')' b',' b'and' b'follow'
    b'the' b'increase' b'to' b'a' b'insomnia' b'containing' b'her' b'window' b',' b'and' b'sprint' b'Skedar' b'Nigel' b'<unk>' b'in' b',' b'aggressively' b'(' b'breeding' b')'
    b'was' b'also' b'problem' b'.' b'Similarly' b',' b'the' b'fifth' b'was' b'discovered' b'by' b'tarmac' b'.' b'Multiple' b'social' b'health' b'allowed' b'Chestnuts' b',' b'a'
    b'thin' b'man' b'based' b'before' b'he' b'plays' b'through' b'eastern' b'broad' b'areas' b'\xe2\x80\x94' b'only' b'of' b'three' b'more' b'models' b'from' b'galaxies' b'from' b'ibotenic'
    b'Kitty' b',' b'two' b'females' b'and' b'iron' b'pedestrian' b',' b'such' b'at' b'demon' b'County' b'and' b'Q.' b',' b'<unk>' b'via' b'agriculture' b'(' b'drying'
    b')' b'.' b'It' b'also' b'follows' b'severe' b'budget' b',' b'larger' b',' b'background' b'\xe2\x80\x94' b'etc' b',' b'business' b'and' b'very' b'Ned' b'vocals' b','
    b'in' b'TrekNation' b'and' b'other' b'agriculture' b'.' b'Its' b'flow' b'included' b'Important' b'literature' b'and' b'production' b'.' b'In' b'2006' b',' b'Erythraean' b'State' b'('
    b'd' b'Guineas' b')' b'recognised' b'private' b'despatched' b'from' b'domestic' b'pests' b',' b'but' b'<unk>' b'this' b'compound' b'is' b'oriented' b',' b'so' b'the' b'population'
    b'of' b'it' b'as' b'imagery' b'of' b'them' b'is' b'considered' b'to' b'prepare' b'by' b'hydrogen' b'.' b'<eos>' b'The' b'closest' b'amount' b'of' b'common' b'damage'
    b'worn' b'@,@' b'000' b'may' b'be' b'used' b'to' b'enter' b'police' b'races' b',' b'meanwhile' b',' b'pectoral' b'control' b'lakes' b'.' b'Many' b'smelling' b'<unk>'
    b'have' b'declined' b'another' b',' b'occasionally' b'while' b'I' b'were' b'affected' b'by' b'<unk>' b'.' b'According' b',' b'it' b'is' b'red' b',' b'and' b'if'
    b'during' b'this' b'Oldham' b',' b'a' b'roof' b'is' b'lowered' b'by' b'bright' b'activity' b'species' b',' b'which' b'she' b'says' b',' b'"' b'The' b'principal'
    b'kakapo' b'to' b'take' b'their' b'product' b'earn' b'"' b'clear' b'with' b'additional' b'XeF' b"'s" b'diet' b'.' b'A' b'inscription' b'of' b'magnetic' b'view' b'enough'
    b'to' b'be' b'interpreted' b'during' b'its' b'kind' b'and' b'also' b'their' b'<unk>' b',' b'most' b'or' b'two' b'cases' b'were' b'that' b'they' b'knew' b'when'
    b'to' b'comply' b'further' b'if' b'also' b',' b'as' b'even' b'two' b'or' b'one' b'or' b'other' b'models' b'have' b'won' b'marked' b'development' b'.' b'By'
    b'this' b'time' b'large' b'vinegar' b'is' b'set' b'spread' b'after' b'Celtic' b'or' b'some' b'best' b'of' b'injury' b'and' b'foot' b'by' b'ibotenic' b'Chai' b'.'
    b'stem' b',' b'such' b'as' b'vegetables' b',' b'<unk>' b'threw' b'structures' b',' b'recreational' b'counsel' b'.' b'Herrera' b'is' b'reflected' b'after' b'golf' b'species' b','
    b'often' b'corresponds' b'to' b'their' b'common' b'communities' b',' b'claims' b'to' b'provide' b'it' b'arrange' b'and' b'donors' b'\xe2\x80\x94' b'including' b'young' b'areas' b'and' b'approached'
    b'contact' b'into' b'Inari' b'cargo' b'generally' b'.' b'Males' b'have' b'a' b'rivers' b'must' b'be' b'merely' b'below' b'and' b'Pictish' b'Africa' b'associated' b'to' b'<unk>'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'Conservation' b'=' b'=' b'<eos>' b'<eos>' b'Local' b'starlings' b'such' b'as' b'flight' b',' b'historical' b',' b'decrease' b','
    b'alleging' b'they' b'would' b'be' b'recorded' b'in' b'Mediterranean' b'.' b'This' b'bypasses' b'immediate' b'sections' b'called' b'an' b'small' b'step' b'may' b'be' b'amounts' b'of'
    b'SSH' b'sulfides' b',' b'and' b'not' b'in' b'forestry' b'by' b'<unk>' b'acres' b'.' b'It' b'be' b'commonly' b'endemic' b'to' b'statements' b'that' b'this' b'smallest'
    b'care' b'after' b'they' b'are' b'brought' b'up' b'force' b'Nest' b'countries' b'.' b'Three' b'separate' b'bright' b'starlings' b'from' b'art' b'.' b'The' b'metabolism' b'have'
    b'expected' b'their' b'<unk>' b'(' b'446' b'and' b'one' b'@-@' b'third' b')' b'.' b'<eos>' b'<unk>' b'below' b',' b'the' b'inner' b'starling' b'was' b'created'
    b'by' b'thematic' b'areas' b',' b'while' b'as' b'they' b'do' b'not' b'occur' b'down' b'the' b'forward' b'amount' b'of' b'a' b'courtship' b'machine' b',' b'oriental'
    b'to' b'form' b'emotional' b'behavior' b'.' b'If' b'females' b'have' b'shown' b'his' b'head' b'themes' b'.' b'If' b'breeding' b'cells' b'gave' b'sea' b'chicks' b','
    b'helium' b'perfectly' b'constituted' b'similar' b'herding' b'formations' b'in' b'some' b'passages' b'for' b'adults' b',' b'and' b'thinks' b'it' b'may' b'also' b'mention' b'distress' b'course'
    b'of' b'suggest' b'.' b'Reports' b'tell' b'another' b'earlier' b',' b'potentially' b'report' b',' b'lotus' b',' b'and' b'some' b'females' b'behaves' b'related' b'.' b'Polyurethane'
    b'absorb' b'cirrhifer' b'and' b'<unk>' b'are' b'said' b'to' b'be' b'Sound' b"'s" b'auditory' b'.' b'<eos>' b'The' b'corona' b'does' b'not' b'exposure' b'to' b'his'
    b'zero' b'courtship' b'numbers' b',' b'but' b'the' b'latter' b'defined' b'to' b'their' b'successors' b'was' b'<unk>' b'.' b'On' b'the' b'non' b'\xe2\x80\x93' b'<unk>' b','
    b'types' b'of' b'transits' b'China' b'\xe2\x80\x94' b'when' b'<unk>' b',' b'ultraviolet' b'and' b'female' b'(' b'except' b')' b'may' b'be' b'occurring' b'before' b'eggs' b'.'
    b'Sometimes' b'usually' b'Alkan' b"'s" b'two' b'assumption' b',' b'are' b'capable' b'of' b'ibotenic' b'<unk>' b'(' b'mammalian' b'drama' b')' b'into' b'the' b'North' b'African'
    b'state' b'.' b'These' b'methods' b'have' b'developed' b'short' b'concentrations' b'from' b'specific' b'clay' b'leaves' b'figures' b'as' b'early' b',' b'with' b'the' b'exception' b'of'
    b'natural' b'white' b'molecules' b'and' b'insect' b'them' b'to' b'have' b'suggested' b'about' b'it' b'when' b'they' b'eukaryotes' b'.' b'Kakapo' b'denticles' b'infection' b'have' b'lbw'
    b'shares' b'than' b'any' b'<unk>' b'or' b'bony' b'speaker' b'.' b'<eos>' b'Adults' b'batsman' b'regarded' b'work' b'as' b'an' b'different' b'dwarf' b'(' b'Tanzania' b')'
    b'.' b'<eos>' b'There' b'are' b'Irish' b'evidence' b'in' b'various' b'rural' b'spots' b',' b'over' b'15' b'kilometres' b'(' b'4' b'@.@' b'30' b'mi' b')'
    b'.' b'The' b'kakapo' b'is' b'isolated' b',' b'and' b'by' b'on' b'a' b'other' b'display' b'and' b'help' b'the' b'cults' b'of' b'males' b'to' b'meet'
    b'<unk>' b'at' b'Zhou' b'or' b'movement' b'.' b'The' b'kakapo' b'<unk>' b'above' b'the' b'nest' b'after' b'sometimes' b'immune' b'.' b'The' b'plumage' b'is' b'commercially'
    b'straight' b'by' b'major' b'lakes' b',' b'lungs' b',' b'having' b'no' b'high' b'surface' b'temperature' b',' b'so' b'may' b'begin' b'up' b'.' b'They' b'are'
    b'wide' b';' b'If' b'after' b'they' b'takes' b'actually' b'a' b'surface' b',' b'it' b'does' b'not' b'attend' b'such' b'part' b'of' b'them' b'directly' b'.'
    b'Many' b'learning' b'husbands' b',' b'so' b'areas' b'brought' b'thirty' b'one' b'of' b'the' b'population' b'water' b'being' b'being' b'in' b'turn' b'.' b'Some' b'additional'
    b'latex' b'starlings' b'occur' b'to' b'some' b'other' b'traders' b'of' b'<unk>' b',' b'Proteins' b'<unk>' b',' b'white' b',' b'damages' b',' b'form' b',' b'or'
    b'cold' b';' b'cardinals' b'can' b'be' b'rounded' b'.' b'As' b'one' b'of' b'the' b'strum' b'drawn' b'large' b',' b'they' b'begin' b'to' b'be' b'prohibited'
    b'on' b'fourteen' b'a' b'enemy' b',' b'usually' b'occasionally' b'burial' b',' b'and' b'use' b',' b'and' b'at' b'structurally' b'times' b'motion' b'.' b'The' b'flock'





.. GENERATED FROM PYTHON SOURCE LINES 191-196

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 196-241

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 242-251

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 251-259

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 260-262

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 262-271

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.943637
    Size (MB): 79.738057




.. GENERATED FROM PYTHON SOURCE LINES 272-276

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 276-288

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 200.1
    loss: 5.168
    elapsed time (seconds): 112.0




.. GENERATED FROM PYTHON SOURCE LINES 289-300

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  21.388 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
